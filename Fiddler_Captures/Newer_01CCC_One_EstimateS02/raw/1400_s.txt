HTTP/1.1 200 OK
Content-Type: application/x-javascript
Content-Length: 30604
Connection: keep-alive
Date: Mon, 12 Dec 2016 07:04:02 GMT
Last-Modified: Mon, 08 Sep 2014 22:27:31 GMT
ETag: "e98638ff258d4852e726451cd6a3f789"
Accept-Ranges: bytes
Server: AmazonS3
Age: 71501
X-Cache: Hit from cloudfront
Via: 1.1 0459f84cfc86cb6f46c44cb1d0a8bdc0.cloudfront.net (CloudFront)
X-Amz-Cf-Id: HWoZG5pNjNGUG4dxIxbSoYDgg4_SpXHU0Kp6qiIx0lLUtZghdf-38w==

/*
*--------------------------------------------------------------------------------------------------------------------------------
* This is the main class for the srpCell 160x600 HTML backup template.                                                          *
*================================================================================================================================
*******************************************************<== NOTES ==>*************************************************************
* @author                  Chris Brenner
* @date                    Feb 20th 2014
* @version                 1.0

* @modify_by               Chris Brenner
* @modify_date             Feb 20th 2014
*-------------------------------------------------------------------------------------------------------------------------------
*/
needs({ version: 'v2',
        specialFiles: {gliderSlider: '', gradients: 'v1', background: ''},
        templateFiles: {srpCell: 'srp/classes/srpCell.js',
                        backgroundMoveArrow: 'srp/classes/backgroundMoveArrow.js',
                        jquip: 'srp/classes/jquip_min.js'}
}, function() {

    // Define variable that will need to be used by the template.
    var _json;
    var _colours;
    var _logoJson;
    var _cellArray  = [];
    var _invArray   = [];
    var _scroller;
    var _linksPanelContainer;

    // Define the size and position values for each element.
    var _logoWidth;
    var _logoHeight;

    var _incentiveWidth;
    var _incentiveHeight;

    var _scrollerWidth;
    var _scrollerHeight;

    var _cellSpacing;
    var _cellSidePadding;

    var _cellWidth;
    var _cellHeight;

    var _scrollerX;
    var _scrollerY;

    // Used to animate the logo in.
    var _logoEndY;
    var _logoInitialY;

    // Used to animate the incentive container and text in.
    var _incentiveEndY;
    var _incentiveInitialY;
    var _incentiveText1EndX;
    var _incentiveText1InitialX;
    var _incentiveText2EndX;
    var _incentiveText2InitialX;
    var _incentiveEvent;
    var _incentiveTimeOut;

    // Used to animate the arrows in and out of the slider.
    var _prevStartY;
    var _prevEndY;
    var _nextStartY;
    var _nextEndY;

    // Define which elements loaded in.
    var _logoLoaded;
    var _incentive1Loaded;
    var _incentive2Loaded

    // Timers used for arrow hover tracking.
    var _prevTimer;
    var _nextTimer;

    // Create a new base class. It will load JSON, form vars.php, and extract the colours.
    var ssm_base        = SSM_BASE.createNew();

    // Gets data loaded and calls a function when JSON is ready to be used.
    ssm_base.prepareData( function() {
        initialize( this );
    });

    // Creates the stage and adds a black border around it.
    STAGE.init();

    /**
     * Once the json has been loaded it will be ready to use and the ad can be initialized at this point the colors will
     * be loaded in and we can change the background color of the 'stage' or color and size of the border.
     */
    var initialize = function( ad_data) {
        // Theres a public storage of the json object as soon as its loaded so every file can get to it as it needs it.
        _json           = SSM_BASE.GlobalJson.get;
        _colours        = SSM_BASE.Color.color;

        // Set up the Intro Loader which will load and track jpegs that will be loaded for intro.
        var json        = _json;
        var callback    = null;
        var version     = 'v2';

        new IntroLoader(json, callback, version);

        // Once the basic prep of the ad is done we can start parsing the json in this case the inventory.
        parseJson();
    }

    /**
     * This function will go through the json and create jsonItems that are needed for this ad.
     */
    var parseJson = function() {
        // Loop through the inventory items.
        for(var i in _json['items']['group'][0]['item']) {
            // Creates an empty object that will hold the jsonItems needed for the cell.
            var jsonObj             = {};

            // Store the jsonItems in the object.
            jsonObj.primaryphotos   = new jsonItem('photos',    'primaryphotos'    ,'item', i, 0, '142x107');
            jsonObj.header          = new jsonItem('text',      'header'           ,'item', i);
            jsonObj.price           = new jsonItem('text',      'price'            ,'item', i);
            jsonObj.clickthrough    = new jsonItem('text',      'clickthrough'     ,'item', i);

            // Add tracking to the jsonItems.
            jsonObj.primaryphotos.addTracking('EXTCLICK',       jsonObj.clickthrough.url);
            jsonObj.header.addTracking('EXTCLICK',              jsonObj.clickthrough.url);
            jsonObj.price.addTracking('EXTCLICK',               jsonObj.clickthrough.url);
            jsonObj.clickthrough.addTracking('EXTCLICK',        jsonObj.clickthrough.url, true);

            // Place the objects into an array.
            _cellArray.push(jsonObj);
        }

        buildAd();
    }

    /**
     * This function will determine which components loaded in and their positioning values.
     */
    var buildAd = function() {
        // Determine which elements loaded.
        _logoLoaded                 = (_json['advertiserlogo']) && isValid(_json['advertiserlogo'].value);
        _incentive1Loaded           = (_json['incentiveclick']) && isValid(_json['incentiveclick'].value);
        _incentive2Loaded           = (_json['incentiveclick2']) && isValid(_json['incentiveclick2'].value);

        // Determine the size and position of each element.
        _logoWidth                  = 160;
        _logoHeight                 = (_logoLoaded) ? 90 : 0;

        _incentiveWidth             = 158;
        _incentiveHeight            = 598;

        _scrollerWidth              = 158;
        _scrollerHeight             = 598 - _logoHeight;

        _cellSpacing                = 12;
        _cellSidePadding            = 6;

        _cellWidth                  = _scrollerWidth - (_cellSidePadding * 2);
        _cellHeight                 = 114;

        _scrollerX                  = 0;
        _scrollerY                  = _logoHeight;


        // Starts building the incentive panel if any text loaded in.
        if(_incentive1Loaded || _incentive2Loaded) {
            buildIncentive();
        }
        // Or starts building the main logo if it has a value.
        else if (_logoLoaded) {
            buildLogo();
        }
        // Or starts building the cells.
        else {
            buildCells();
        }
    }

    /**
     * This function will create the incentive panel.
     */
    var buildIncentive = function() {
        // Create and style main incentive container.
        var incentivePanel = document.createElement('div');
        incentivePanel.setAttribute('id',      'incentivePanel');
        id('ssm_ad_container').appendChild(incentivePanel);

        // Variables used for the incentive animation.
        _incentiveEndY              = 0;
        _incentiveInitialY          = 600;

        superStyle(incentivePanel, {
            position:               'absolute',
            top:                    _incentiveInitialY + 'px',
            left:                   0,
            height:                 _incentiveHeight + 'px',
            width:                  _incentiveWidth + 'px',
            fontFamily:             'arial, sans-serif',
            fontSize:               12,
            textAlign:              'center',
            opacity:                0,
            filter:                 'alpha(opacity = 0)',
            zIndex:                 10
        });


        // Create and style incentive background.
        // Background seperated from main container so we can use opacity on it without affecting the text inside.
        var incentiveBackground = document.createElement('div');
        incentivePanel.appendChild(incentiveBackground);

        superStyle(incentiveBackground, {
            position:               'absolute',
            top:                    0,
            left:                   0,
            height:                 _incentiveHeight + 'px',
            width:                  _incentiveWidth + 'px',
            opacity:                .63,
            filter:                 'alpha(opacity = 63)',
            background:             '#000000'
        });


        // Variables used to position the text fields.
        var incentive1Height        = 0; // Set to 0 in case it doesn't load.
        var incentive2Height        = 0; // Set to 0 in case it doesn't load.
        var textWidth               = 158;
        var textPadding             = 4;

        // Variables used to animate the incentive text in.
        _incentiveText1EndX         = 0;
        _incentiveText1InitialX     = _incentiveText1EndX - textWidth;
        _incentiveText2EndX         = 0;
        _incentiveText2InitialX     = _incentiveText2EndX + textWidth;


        // Create incentive text 1 if loaded. Do this before styling so we can get height.
        if (_incentive1Loaded) {
            var incentive1 = new jsonItem('text', 'incentiveclick');
            incentivePanel.appendChild(incentive1.html);

            var incentive1Height = incentive1.html.children[0].offsetHeight;
        }

        // Create incentive text 2 if loaded. Do this before styling so we can get height.
        if (_incentive2Loaded) {
            var incentive2 = new jsonItem('text', 'incentiveclick2');
            incentivePanel.appendChild(incentive2.html);

            var incentive2Height = incentive2.html.children[0].offsetHeight;
        }

        // Positions of each incentive text.
        var pos1 = (_incentiveHeight - (incentive1Height + textPadding + incentive2Height)) / 2;
        var pos2 = (_incentive1Loaded) ? pos1 + incentive1Height + textPadding : pos1;


        // Style incentive text 1 if loaded.
        if (_incentive1Loaded) {
            superStyle(incentive1.html, {
                position:           'absolute',
                top:                pos1 + 'px',
                left:               _incentiveText1InitialX + 'px',
                width:              textWidth + 'px',
                color:              '#ffffff',
                opacity:            0,
                filter:             'alpha(opacity = 0)'
            });
        }

        // Style incentive text 2 if loaded.
        if (_incentive2Loaded) {
            superStyle(incentive2.html, {
                position:           'absolute',
                top:                pos2 + 'px',
                left:               _incentiveText2InitialX + 'px',
                width:              textWidth + 'px',
                color:              '#afafaf',
                opacity:            0,
                filter:             'alpha(opacity = 0)'
            });
        }

        // If incentive is clicked on it will animate out immediately.
        addEvent(incentivePanel, 'click', _incentiveEvent = function(event){event.stopPropagation ? event.stopPropagation() : (event.cancelBubble = true); animateIncentiveOut();}, false);


        // Starts building the main logo if it has a value.
        if (_logoLoaded) {
            buildLogo();
        }
        // Or starts building the cells.
        else {
            buildCells();
        }
    }

    /**
     * This function will create the main logo.
     */
    var buildLogo = function() {
        // Variables used for logo animation.
        _logoEndY                   = 0;
        _logoInitialY               = _logoEndY - _logoHeight;

        // Create a style object for the main logo.
        var logoStyle = {
            position:               'absolute',
            top:                    _logoInitialY + 'px',
            left:                   0,
            height:                 _logoHeight,
            width:                  _logoWidth,
            opacity:                0,
            filter:                 'alpha(opacity = ' + (0 * 100) + ')',
            background:             _colours('logoBackground', _colours('ColorValue4', '#000000')),
            cursor:                 'pointer',
            overflow:               'hidden',
            zIndex:                 15
        };

        // The callback function for after the logo has been loaded.
        var callback = function() {
            // Only want logo container to be 158px wide for ie border bug but if we set that in
            // logoStyle above it will affect the image size due to how the logo class works.
            superStyle(id('advertiserlogo'), {
                width:              _logoWidth - 2 + 'px'
            });

            // Starts building the cells.
            buildCells();
        };

        // Create the logo object.
        logo = new logo('advertiserlogo', logoStyle, callback);

        // Add tracking to the logo.
        logo.jsonItem.addTracking('EXTCLICK', name.url);
    }

    /**
     * This function will create the cells.
     */
    var buildCells = function() {
        // Variables needed by the cell.
        var textHeights             = [18, 18, 19];
        var textSizes               = [12, 14, 13];
        var priceColour             = _colours('priceText', _colours('ColorValue3', '#ffffff'));
        var cellBorderThickness     = 3;
        var backgroundHoverColour   = _colours('cellBorderHover', _colours('ColorValue2', _colours('background')));
        var textBackgroundColour    = _colours('textBackground', '#000000');

        // Loop through the Array that is holding the objects made out of the jsonItems.
        for(var i in _cellArray) {

            // Create a cell and push it into a different array.
            var cell = new srpCell( _cellWidth,
                                    _cellHeight,
                                    _cellArray[i].primaryphotos,
                                    _cellArray[i].header,
                                    _cellArray[i].price,
                                    _cellArray[i].clickthrough,
                                    textHeights,
                                    textSizes,
                                    priceColour,
                                    cellBorderThickness,
                                    backgroundHoverColour,
                                    textBackgroundColour);

            _invArray.push(cell);
        }

        // Once all the cells are made we are ready to build the scroller.
        buildScroller();
    }

    /**
     * This function will create the scroller.
     */
    var buildScroller = function() {
        // Variables needed by the scroller.
        var autoScrollRate                  = 1;
        var hoverScrollRate                 = 4;
        var cloning                         = false;
        var horizontal                      = false;
        var startCentered                   = true;
        var autoScrollForce                 = true;
        var autoScrollMousePause            = true;
        var containerAnimateInEasing        = 'EASE_OUT_CUBIC'; // The easing used for animating containers in.


        // Define the properties needed by both arrows.
        // Arrow backgrounds.
        var backgroundWidth                 = _scrollerWidth;
        var backgroundHeight                = 26;
        var backgroundColour                = '#333333';
        var backgroundOpacity               = .8;
        var backgroundOpacityHover          = .9;
        var prevBackgroundRounding          = '0px 0px 6px 6px';
        var nextBackgroundRounding          = '6px 6px 0px 0px';

        // Arrows.
        var arrowWidth                      = 6;
        var arrowHeight                     = 10;
        var arrowColour                     = '#ffffff';
        var arrowOpacity                    = 1;
        var prevOffset                      = (2/3);
        var nextOffset                      = (1/3);
        var prevInitialPos                  = 0;
        var nextInitialPos                  = 0;
        var prevMove                        = 6;
        var nextMove                        = -6;

        // Create both arrows.
        var prevArrow = new backgroundMoveArrow(    'prev',
                                                    'arrows',
                                                    arrowWidth,
                                                    arrowHeight,
                                                    backgroundWidth,
                                                    backgroundHeight,
                                                    arrowColour,
                                                    backgroundColour,
                                                    '270deg',
                                                    arrowOpacity,
                                                    backgroundOpacity,
                                                    backgroundOpacityHover,
                                                    prevBackgroundRounding,
                                                    prevInitialPos,
                                                    prevOffset,
                                                    prevMove);

        var nextArrow = new backgroundMoveArrow(    'next',
                                                    'arrows',
                                                    arrowWidth,
                                                    arrowHeight,
                                                    backgroundWidth,
                                                    backgroundHeight,
                                                    arrowColour,
                                                    backgroundColour,
                                                    '90deg',
                                                    arrowOpacity,
                                                    backgroundOpacity,
                                                    backgroundOpacityHover,
                                                    nextBackgroundRounding,
                                                    nextInitialPos,
                                                    nextOffset,
                                                    nextMove);

        // The container OUT positions array.
        // If more than one container is created they will each be moved from their initial positions in a row/column
        // by the top/left amount to ensure they are all animating in over the same distance.
        var containersOutPositions = [
            {top: _scrollerHeight + 'px',                           opacity: 0}
        ];

        // Variables used for arrow animations.
        _prevStartY     = prevInitialPos;
        _prevEndY       = -backgroundHeight;
        _nextStartY     = _scrollerHeight - backgroundHeight;
        _nextEndY       = _scrollerHeight;

        // The arrows IN positions array.
        var arrowsInPositions = [
            {top: _prevStartY + 'px',                            opacity: 1},
            {top: _nextStartY + 'px',        opacity: 1}
        ];

        // The arrows OUT positions array.
        var arrowsOutPositions = [
            {top: _prevEndY + 'px',                         opacity: 0},
            {top: _nextEndY + 'px',                           opacity: 0}
        ];


        // Create the slider.
        _scroller = new gSlider( _scrollerWidth,
                                _scrollerHeight,
                                _cellSpacing,
                                _invArray,
                                prevArrow,
                                nextArrow,
                                arrowsInPositions,
                                autoScrollRate,
                                hoverScrollRate,
                                cloning,
                                horizontal,
                                startCentered,
                                autoScrollForce,
                                autoScrollMousePause);

        // Position the slider.
        _scroller.x(_scrollerX + 'px');
        _scroller.y(_scrollerY + 'px');

        // Sets the out states of the slider and arrows.
        _scroller.setAnimateOutPositions(containersOutPositions, arrowsOutPositions, containerAnimateInEasing);

        // Removes the 'mask' on cellLevel so you can see the cell drop shadows fully.
        superStyle(id('cellLevel'), {
            overflow:           'visible'
        });

        // If the scroller isn't animating (not enough inventory items) arrows won't be created and tracking won't be added.
        if (_gsAnimate == true) {
            // Add arrow tracking.
            new tracking.createNew(id('prev'), 'ENGAGECLICK');
            new tracking.createNew(id('next'), 'ENGAGECLICK');
        }

        // Ad is ready to run.
        runAd();
    }

    /**
     * This function will animate the ad components in.
     */
    var runAd = function() {
        // Remove the preloader because everything is in position.
        STAGE.adReady();

        // Set tracking on ad background to use logo tracking.
        if (_logoLoaded) {
            //shareTrack(id('ssm_ad_container'), id('advertiserlogo'));
        };


        // Animate incentive panel in.
        if (_incentive1Loaded || _incentive2Loaded) {
            // Animate the container in.
            setTimeout(function() {
                new timeAnimation(id('incentivePanel'),             {top: _incentiveEndY,           opacity: 1}, 500);
            }, 1000);

            // Animate incentive text 1 in if it loaded.
            if (_incentive1Loaded) {
                setTimeout(function() {
                    new timeAnimation(id('incentiveclick'),         {left: _incentiveText1EndX,     opacity: 1}, 300);
                }, 1750);
            }

            // Animate incentive text 2 in if it loaded.
            if (_incentive2Loaded) {
                setTimeout(function() {
                    new timeAnimation(id('incentiveclick2'),        {left: _incentiveText2EndX,     opacity: 1}, 300);
                }, 1750);
            }

            // Set timeout to animate incentive panel out.
            _incentiveTimeOut = setTimeout(function() {
               animateIncentiveOut();
            }, 5000);
        }


        // Animate logo in.
        if (_logoLoaded) {
            setTimeout(function() {
                // Center the logo image.
                // Temp fix to center it as late as possible while we get better image loading event handling.
                if (id('advertiserlogo').children[0].offsetWidth) {
                    centerDiv(id('advertiserlogo').children[0]);
                }
                else {
                    id('advertiserlogo').children[0].style.top = 0;
                    id('advertiserlogo').children[0].style.left = 0;
                }

                new timeAnimation(id('advertiserlogo'),             {top: _logoEndY,                opacity: 1}, 400);
            }, 750);
        }


        // Animate slider in.
        setTimeout(function() {
            var containerAnimateInDuration                          = 1000;
            var animateInDelay                                      = 0;
            var incrementalAnimateInDelay                           = 0;
            var arrowsAnimateInDuration                             = 750;
            var arrowsAnimateInDelay                                = 1750;

            _scroller.animateIn(containerAnimateInDuration, animateInDelay, incrementalAnimateInDelay, arrowsAnimateInDuration, arrowsAnimateInDelay);

            // Makes sure arrows are needed before setting up arrow events.
            // Set timeOut so that events aren't added before the components are animated in.
            if (_gsAnimate == true) {
                setTimeout(function() {
                    arrowEvents();
                }, arrowsAnimateInDuration + arrowsAnimateInDelay);
            }
        }, 1250);
    }

    /**
     * This function will animate the incentive panel out.
     */
    var animateIncentiveOut = function() {
        // Clear timeout if it's still running.
        clearTimeout(_incentiveTimeOut);

        // Remove listener.
        removeEvent(id('incentivePanel'), 'click', _incentiveEvent);

        // Animate incentive panel out.
        new timeAnimation(id('incentivePanel'),                     {opacity: 0}, 750);

        // Set to display none once animation is finished so it won't interfere with clicks.
        setTimeout(function() {
           id('incentivePanel').style.display                       = 'none';
        }, 750);
    }

    /**
     * This function sets up the arrow events.
     */
    var arrowEvents = function() {
        // Arrow tracking.
        // Prev arrow over.
        $('#prev').mouseenter(function(event) {
            var eventCopy = {};

            // IE won't let you pass an event as a parameter inside a setTimeout, so make a clone here as a fix.
            for (var i in event) {
                eventCopy[i] = event[i];
            }

            // Set 1 second timeout before tracking will occur to prevent unintended bloating of ENGAGECLICK stats.
            // Timeout will be cleared on mouseleave and therefore will only track if arrows were hovered on for at least 1 second.
            _prevTimer = setTimeout(function(){
                if(ie < 9) {
                    clickTracking(eventCopy);
                }
                else{
                    clickTracking(event);
                }
            }, 1000);
        });

        // Prev arrow out.
        if (safari) { // MouseLeave events that touch the border/iFrame edge aren't working in jQuip.
            addEvent(id('prev'), 'mouseleave', function(){
                // Clear the arrow hover tracking timer.
                clearTimeout(_prevTimer);
            });
        }
        else {
            $('#prev').mouseleave(function(event) {
                // Clear the arrow hover tracking timer.
                clearTimeout(_prevTimer);
            });
        }

        // Next arrow over.
        $('#next').mouseenter(function(event) {
            var eventCopy = {};

            // IE won't let you pass an event as a parameter inside a setTimeout, so make a clone here as a fix.
            for (var i in event) {
                eventCopy[i] = event[i];
            }

            // Set 1 second timeout before tracking will occur to prevent unintended bloating of ENGAGECLICK stats.
            // Timeout will be cleared on mouseleave and therefore will only track if arrows were hovered on for at least 1 second.
            _nextTimer = setTimeout(function(){
                if(ie < 9) {
                    clickTracking(eventCopy);
                }
                else{
                    clickTracking(event);
                }
            }, 1000);
        });

        // Next arrow out.
        if (safari) { // MouseLeave events that touch the border/iFrame edge aren't working in jQuip.
            addEvent(id('next'), 'mouseleave', function(){
                // Clear the arrow hover tracking timer.
                clearTimeout(_nextTimer);
            });
        }
        else {
            $('#next').mouseleave(function(event) {
                 // Clear the arrow hover tracking timer.
                clearTimeout(_nextTimer);
            });
        }


        // Arrow animations in and out of the scroller.
        $('#ssm_ad_container').mouseenter(function() {
            // Kill any current animations on the elements we want to animate.
            killer.kill(id('prev').getAttribute('Name'));
            killer.kill(id('next').getAttribute('Name'));

            // Animate the arrows in.
            new timeAnimation(id('prev'), {top: _prevStartY + 'px'}, 300);
            new timeAnimation(id('next'), {top: _nextStartY + 'px'}, 300);
        });

        if (safari) { // MouseLeave events that touch the border/iFrame edge aren't working in jQuip.
            addEvent(id('ssm_ad_container'), 'mouseleave', function(){
                // Kill any current animations on the elements we want to animate.
                killer.kill(id('prev').getAttribute('Name'));
                killer.kill(id('next').getAttribute('Name'));

                // Animate the arrows out.
                new timeAnimation(id('prev'), {top: _prevEndY + 'px'}, 300);
                new timeAnimation(id('next'), {top: _nextEndY + 'px'}, 300);
            });
        }
        else {
            $('#ssm_ad_container').mouseleave(function() {
                // Kill any current animations on the elements we want to animate.
                killer.kill(id('prev').getAttribute('Name'));
                killer.kill(id('next').getAttribute('Name'));

                // Animate the arrows out.
                new timeAnimation(id('prev'), {top: _prevEndY + 'px'}, 300);
                new timeAnimation(id('next'), {top: _nextEndY + 'px'}, 300);
            });
        }
    }
});

var TRACK = function (t) {
    console.log('%c' + 'Welcome to HTML track tester version 1.0!', 'color:' + '#c41a16');
    console.log('%c' + "To check vars tracking by itself call TRACK(0) or TRACK('vars').", 'color:' + '#c41a16');
    console.log('%c' + 'To check regular tracking by itself call TRACK(1).' , 'color:' + '#c41a16');
    console.log('%c' + 'To manually enter the amount of click types call testTrack(ext_inv, ext_non, engage, expand, intro, prev).', 'color:' + '#c41a16');
    console.log('');

    if (typeof t == 'string') {
        t = t.toUpperCase();
    }
    
    // Test both vars and regular tracking.
    if (t == undefined) {
        console.log('%c' + SSM_BASE.run.varsCheck(), 'color:' + '#c41a16');

        console.log(''); // Line break.

        // (EXT_INV, EXT_NON, ENGAGE, EXPAND, INTRO, PREV)
        console.log('%c' + testTrack(4, 1, 2, 0, 0, 0), 'color:' + '#c41a16');
    }
    // Only test vars.
    else if (t == 0 || t == 'VARS' || t == 'VAR'){
        console.log('%c' + SSM_BASE.run.varsCheck(), 'color:' + '#c41a16');
    }
    // Only test regular tracking.
    else {
        // (EXT_INV, EXT_NON, ENGAGE, EXPAND, INTRO, PREV)
        console.log('%c' + testTrack(4, 1, 2, 0, 0, 0), 'color:' + '#c41a16');
    }

    return '--- ALL TESTING COMPLETE ---';
}