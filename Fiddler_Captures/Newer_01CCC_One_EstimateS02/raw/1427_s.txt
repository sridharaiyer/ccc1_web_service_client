HTTP/1.1 200 OK
Content-Type: application/x-javascript
Content-Length: 17312
Connection: keep-alive
Date: Sun, 18 Dec 2016 13:37:42 GMT
Last-Modified: Tue, 08 Apr 2014 19:35:24 GMT
ETag: "c05cf8a583d5985cc9f880cd49476568"
Accept-Ranges: bytes
Server: AmazonS3
Age: 81585
X-Cache: Hit from cloudfront
Via: 1.1 b4e8d615cf68a3410b230605c5912c88.cloudfront.net (CloudFront)
X-Amz-Cf-Id: U4iGrJp2JMC8s5R8jQMBq7nxaAvTelARvneOpBHr0sNlVMwaqVUjXg==

/*
*--------------------------------------------------------------------------------------------------------------------------------------------
* A cell that includes a photo, title, price, and clickthrough button.                                                                      *
* The image takes up the full cell dimensions and the text is placed on top.                                                                *
*============================================================================================================================================
* width                     (@Number)   = The width of the cell.                                                                            *
* height                    (@Number)   = The height of the cell.                                                                           *
* photo                     (@jsonItem) = The inventory image.                                                                              *
* header                    (@jsonItem) = The inventory header.                                                                             *
* price                     (@jsonItem) = The inventory price.                                                                              *
* clickthrough              (@jsonItem) = The inventory clickthrough.                                                                       *
* textHeights               (@Array)    = The height of each text field ([header, price, clickthrough]).                                    *
* textSizes                 (@Array)    = The text size of each text field ([header, price, clickthrough]).                                 *
* priceColour               (@String)   = The colour of the price text                                                                      *
* cellBorderThickness       (@Number)   = The thickness of the cell border.                                                                 *
* backgroundHoverColour     (@String)   = The colour of the cell background on hover.                                                       *
* textBackgroundColour      (@String)   = The colour of the text background.                                                                *
*******************************************************<== NOTES ==>*************************************************************************
* @author                  Chris Brenner
* @date                    Feb 20th 2014
* @version                 1.0

* @modify_by               Chris Brenner
* @modify_date             Feb 20th 2014
*--------------------------------------------------------------------------------------------------------------------------------------------
*/

var srpCell = function( width,
                        height,
                        photo,
                        header,
                        price,
                        clickthrough,
                        textHeights,
                        textSizes,
                        priceColour,
                        cellBorderThickness,
                        backgroundHoverColour,
                        textBackgroundColour) {
    /***************************************************************************************************************
    * This is needed for cloning. Take note that jsonItem needs to be cloned as well for cloning to work properly. *
    ***************************************************************************************************************/
    this.args = [width,
                height,
                photo,
                header,
                price,
                clickthrough,
                textHeights,
                textSizes,
                priceColour,
                cellBorderThickness,
                backgroundHoverColour,
                textBackgroundColour];

    // Create main cell container.
    var cell = document.createElement('div');
    cell.setAttribute('class',   'cell');

    // Create cell background/border that shows on hover.
    var cellHoverForeground = document.createElement('div');
    cellHoverForeground.setAttribute('class',   'cellHover');
    cell.appendChild(cellHoverForeground);

    // Create container for all of the cell details.
    var details = document.createElement('div');
    cell.appendChild(details);

    // Create text backgrounds separatly so alpha can be applied, cross browser, without affecting the text.
    var headerBackground = document.createElement('div');
    var priceBackground = document.createElement('div');
    var clickthroughBackground = document.createElement('div');

    // Append photo and all text elements to details container.
    details.appendChild(photo.html);
    details.appendChild(headerBackground);
    details.appendChild(header.html);
    details.appendChild(priceBackground);
    details.appendChild(price.html);
    details.appendChild(clickthroughBackground);
    details.appendChild(clickthrough.html);

    // Positioning variables.
    var detailsHeight = height - (cellBorderThickness * 2);
    var detailsWidth = width - (cellBorderThickness * 2);

    // Style everything.
    superStyle(cell, {
        position:                   'absolute',
        height:                     height + 'px',
        width:                      width + 'px',
        '-moz-border-radius':       '5px',
        '-webkit-border-radius':    '5px',
        borderRadius:               '5px',
        '-moz-box-shadow':          '0 0 3px 1px #333333',
        '-webkit-box-shadow':       '0 0 3px 1px #333333',
        boxShadow:                  '0 0 3px 1px #333333',
        overflow:                   'hidden',
        cursor:                     'pointer'
    });

    if (safari) {
        superStyle(cell, {
            background:             '-webkit-gradient(linear, left top, left bottom, color-stop(0%,#ffffff), color-stop(100%,#7f7f7f))', /* Chrome,Safari4+ */
            background:             '-webkit-linear-gradient(top, #ffffff 0%,#7f7f7f 100%)', /* Chrome10+,Safari5.1+ */
            background:             'linear-gradient(to bottom, #ffffff 0%,#7f7f7f 100%)', /* W3C */
            overflow:               'visible'
        });
    }

    superStyle(cellHoverForeground, {
        position:                   'absolute',
        height:                     height + 'px',
        width:                      width + 'px',
        '-moz-border-radius':       '5px',
        '-webkit-border-radius':    '5px',
        borderRadius:               '5px',
        background:                 backgroundHoverColour,
        opacity:                    0,
        filter:                     'alpha(opacity = 0)',
        overflow:                   'hidden',
        cursor:                     'pointer'
    });

    superStyle(details, {
        position:                   'absolute',
        top:                        cellBorderThickness,
        left:                       cellBorderThickness,
        height:                     detailsHeight + 'px',
        width:                      detailsWidth + 'px',
        overflow:                   'hidden'
    });

    superStyle(photo.html, {
        height:                     detailsHeight + 'px',
        width:                      detailsWidth + 'px'
    });

    superStyle(photo.html.children[0], {
        position:                   'relative',
        minHeight:                  detailsHeight + 'px',
        minWidth:                   detailsWidth + 'px'
    });

    superStyle(headerBackground, {
        position:                   'absolute',
        top:                        0 + 'px',
        left:                       0 + 'px',
        height:                     textHeights[0] + 'px',
        width:                      detailsWidth + 'px',
        backgroundColor:            textBackgroundColour,
        opacity:                    .5,
        filter:                     'alpha(opacity = 50)'
    });

    superStyle(header.html, {
        position:                   'absolute',
        top:                        0 + 'px',
        left:                       5 + 'px',
        height:                     textHeights[0] + 'px',
        width:                      detailsWidth - 10 + 'px', // Account for left position/padding.
        lineHeight:                 textHeights[0] + 'px',
        fontFamily:                 'Arial, sans-serif',
        fontSize:                   textSizes[0] + 'px',
        color:                      '#ffffff',
        textAlign:                  'center',
        verticalAlign:              'middle',
        overflow:                   'hidden',
        whiteSpace:                 'nowrap',
        textOverflow:               'ellipsis'
    });

    superStyle(header.html.children[0], {
        maxWidth:                   detailsWidth - 10 + 'px'
    });

    superStyle(priceBackground, {
        position:                   'absolute',
        bottom:                     0 + 'px',
        left:                       0 + 'px',
        height:                     textHeights[1] + 'px',
        width:                      detailsWidth + 'px',
        backgroundColor:            textBackgroundColour,
        opacity:                    .5,
        filter:                     'alpha(opacity = 50)'
    });

    superStyle(price.html, {
        position:                   'absolute',
        bottom:                     0 + 'px',
        left:                       0 + 'px',
        height:                     textHeights[1] + 'px',
        width:                      detailsWidth + 'px',
        lineHeight:                 textHeights[1] + 'px',
        fontFamily:                 'Arial, sans-serif',
        fontSize:                   textSizes[1] + 'px',
        color:                      priceColour,
        '-moz-text-shadow':         '1px 1px 5px #000000',
        '-webkit-text-shadow':      '1px 1px 5px #000000',
        textShadow:                '1px 1px 5px #000000',
        textAlign:                  'center',
        verticalAlign:              'middle'
    });

    superStyle(clickthroughBackground, {
        position:                   'absolute',
        top:                        ((detailsHeight - textHeights[2]) / 2) + 'px',
        left:                       0 + 'px',
        height:                     textHeights[2] + 'px',
        width:                      detailsWidth + 'px',
        backgroundColor:            textBackgroundColour,
        opacity:                    0,
        filter:                     'alpha(opacity = 0)'
    });

    superStyle(clickthrough.html, {
        position:                   'absolute',
        top:                        ((detailsHeight - textHeights[2]) / 2) + 'px',
        left:                       0 + 'px',
        height:                     textHeights[2] + 'px',
        width:                      detailsWidth + 'px',
        lineHeight:                 textHeights[2] + 'px',
        fontFamily:                 'Arial, sans-serif',
        fontSize:                   textSizes[2] + 'px',
        color:                      '#ffffff',
        textAlign:                  'center',
        verticalAlign:              'middle',
        opacity:                    0,
        filter:                     'alpha(opacity = 0)'
    });


    // Set up style functions that will execute when cell is added to Dom.
    executeOnLoad(cell, function(){
        shrinkText(price.html.children[0]);
        shrinkText(clickthrough.html.children[0]);

        if (!safari) {
            createGradient('V', [gradientColor('#ffffff'), gradientColor('#7f7f7f'), 1, height], cell);
            superStyle(cell.children[2], {
                height:                     height + 'px',
                width:                      width + 'px',
                '-moz-border-radius':       '5px',
                '-webkit-border-radius':    '5px',
                borderRadius:               '5px',
                overflow:                   'hidden'
            });
        }
    });

    // Center the photos. This is a temp fix while we find a better way of loading images.
    // If photo.loaded is still false, start looping until it has a value of true or 'error'.
    if (!photo.loaded) {
        (function myLoop (i) {

            setTimeout(function () {
                // Requested image has now loaded - center it.
                if (photo.loaded == true) {
                    executeOnLoad(photo.html, function(){
                        centerDiv(photo.html.children[0]);
                    });
                }
                // Placeholder image has now loaded - make sure it's not resized and center it.
                else if (photo.loaded == 'error') {
                    executeOnLoad(photo.html, function(){
                        superStyle(photo.html.children[0], {
                            width:         'auto',
                            height:        'auto',
                            minHeight:     0,
                            minWidth:      0
                        });

                        centerDiv(photo.html.children[0]);
                    });
                }
                // Photo.loaded is still false - call loop again unless counter has reached limit.
                else {
                    if (--i) myLoop(i); // If photo.loaded is still false, re-call function.
                }

            }, 100)

        })(50); // Number of iterations.
    }
    // Placeholder image has loaded - make sure it's not resized and center it.
    else if (photo.loaded == 'error') {
        // Set height and width to auto and center image.
        executeOnLoad(photo.html, function(){
            superStyle(photo.html.children[0], {
                width:         'auto',
                height:        'auto',
                minHeight:     0,
                minWidth:      0
            });

            centerDiv(photo.html.children[0]);
        });
    }
    // Requested image has loaded - center it.
    else {
        // Center image.
        executeOnLoad(photo.html, function(){
            centerDiv(photo.html.children[0]);
        });
    }

    // When the cell is made and is ready it is put into the dom property.
    this.dom = cell;

    // Set up tracking on cell.
    shareTrack(this.dom, photo.html);


    // Add mouse events.
    $(cell).mouseenter(function() {
        // Kill any current animations on the elements we want to animate.
        killer.kill(cell.children[0].getAttribute('Name'));
        killer.kill(cell.children[1].children[5].getAttribute('Name'));
        killer.kill(cell.children[1].children[6].getAttribute('Name'));

        // Start cell animations.
        new timeAnimation(cell.children[0], {opacity: 0.8}, 500);
        new timeAnimation(cell.children[1].children[5], {opacity: 0.75}, 200);
        new timeAnimation(cell.children[1].children[6], {opacity: 1}, 300);
    });

    if(safari) { // MouseLeave events that touch the border/iFrame edge aren't working in jQuip.
        addEvent(cell, 'mouseleave', function(){
            // Kill any current animations on the elements we want to animate.
            killer.kill(cell.children[0].getAttribute('Name'));
            killer.kill(cell.children[1].children[5].getAttribute('Name'));
            killer.kill(cell.children[1].children[6].getAttribute('Name'));

            // Start cell animations.
            if (ie === 7) {
                // Fix bug where mouseenter function finishes after mouseleave, causing the border colour to stick.
                new timeAnimation(cell.children[0], {opacity: 0}, 500);
            }
            else{
                new timeAnimation(cell.children[0], {opacity: 0}, 300);
            }

            new timeAnimation(cell.children[1].children[5], {opacity: 0}, 250);
            new timeAnimation(cell.children[1].children[6], {opacity: 0}, 250);
        });
    }
    else {
        $(cell).mouseleave(function() {
            // Kill any current animations on the elements we want to animate.
            killer.kill(cell.children[0].getAttribute('Name'));
            killer.kill(cell.children[1].children[5].getAttribute('Name'));
            killer.kill(cell.children[1].children[6].getAttribute('Name'));

            // Start cell animations.
            if (ie === 7) {
                // Fix bug where mouseenter function finishes after mouseleave, causing the border colour to stick.
                new timeAnimation(cell.children[0], {opacity: 0}, 500);
            }
            else{
                new timeAnimation(cell.children[0], {opacity: 0}, 300);
            }

            new timeAnimation(cell.children[1].children[5], {opacity: 0}, 250);
            new timeAnimation(cell.children[1].children[6], {opacity: 0}, 250);
        });
    }
};


// The function that will return the clone of the cell.
srpCell.prototype.clone = function(pos) {
    var self = this;

    var temp = new srpCell(self.args[0], self.args[1], self.args[2].clone(), self.args[3].clone(), self.args[4].clone(), self.args[5].clone(), self.args[6], self.args[7], self.args[8], self.args[9], self.args[10], self.args[11]);

    return temp;
}