HTTP/1.1 200 OK
Content-Type: application/javascript
Content-Length: 33558
Connection: keep-alive
Date: Sat, 07 Jan 2017 12:19:07 GMT
Last-Modified: Fri, 12 Dec 2014 23:28:58 GMT
ETag: "8f87c23fae15aa82296cd394a24cc8ad"
Accept-Ranges: bytes
Server: AmazonS3
Age: 34230
X-Cache: Hit from cloudfront
Via: 1.1 fb5794831ad522a7a9b0d102a91d1696.cloudfront.net (CloudFront)
X-Amz-Cf-Id: jl-Cb5Y8sRh_3pBFcUawRGWXOu_EPnbAbAYQWvbmawWm1vonXT9PLw==

/*
 * @modify_by   Chris Brenner
 * @modify_date May 16 2014
 *
 * Updated Dec 19 2013 by Chris - added hasClass function to check an element for a specified class value.
 *
 * Updated Nov 11 2013 by Chris - Updated isColorlight function to allow a threshold.
 * Added lightenDarkenColor2 to test as lightenDarkenColor was giving incorrect color values back in some cases.
 * Added isValid function to test whether a string holds a valid value or not.
 *
 * Updated May 12 2014 by Chris -  Removed previous change to superStyle that caused ie7&8 styling to be
 * handled with the if(FF) statement to handle dashed and added a case for it in the else statement below
 * so that it would still go through all of the filter handling needed for IE.
 *
 * Updated May 16 by Chris - Updated shrink() and shrinkMultiLine() so that if the lineHeight of the element
 * they are handling is set to 'normal' (it's default) it won't try to use Math on it as it breaks ie7&8.
 * Also Added getNatural() to calculate the original height and width of an image since the naturalHeight
 * and naturalWidth properties previously used to do this don't exist in ie7&8.
 *
 * Updated May 20 by Chris - Updated 'to' and 'from' in mouseEnter and mouseLeave cases in addEvent(); They
 *                           were looking for toElement and fromElement which fails in some browsers. Now they
 *                           check for relatedTarget and target as well.
 * Updated May 30 by Chris - Updated addEvent() to check if 'this' and 'to' / 'from' are equal before sending callback.
 *                           It was causing events to callback if this was equal to 'to' / 'from' which isn't the
 *                           functionality we want.
 * Updated July 28 by Chris - Added verticallyCenterDiv function. Exactly the same as centerDiv() but only
 *                            centers vertically.
 * Updated July 28 by Chris - Updated the htmlEntities() to allow for multiple replacements instead of singular.
*/

//----------------------------------------------------------------------------------------
// A better Style function to use when need to overwrite every style or set it for the
// first time
//========================================================================================
// el           = element
// format       = css string
//----------------------------------------------------------------------------------------
function betterStyle(el, format) {
    if(el) {
        if( ie ) {
            el.style.setAttribute('cssText', format);
        } else {
            el.setAttribute('style', format);
        }
    }
}


//----------------------------------------------------------------------------------------
//function that will take an element and a css format object and apply the style
//========================================================================================
// el           = element
// format       = css object should be in the following format  { css property: 'value' }
//----------------------------------------------------------------------------------------
function styleEl(el, format) {
    if(el) {
        for (var i in format) {
            el.style[i] = format[i];
        }
    }
}

/**
* This function's purpose is to allow the developer to set the style regardless of
* browser using either the string or object method.
*
* @param {object} el                The element whose style will be updated.
* @param {string|object} format The format that will be applied to the object.
* @param {boolean} overwrite        Should the style earse all previous styling.
*/
function superStyle(el, format, overwrite) {
    var isFormatString = (typeof format === 'string');

    // Resets the style of the element if desired.
    if (overwrite) {
        var overwriteText = (isFormatString) ? (format) : ('');

        if (ie) {
            el.style.setAttribute('cssText', overwriteText);
        } else {
            el.setAttribute('style', overwriteText);
        }

        // Overwrote with the format string so its done now.
        if (isFormatString) {
            return;
        }
    }

    // If format is a string it will turn it into a object. (Might not need to do this if just add to get attribute?)
    if (isFormatString) {
        format                  = format.replace(/\s*([;:])\s*/g, '$1');    // Removes all whitespace around ; and :
        format                  = format.replace(/\s{2,}/g, ' ');           // Makes sure remaining whitespace is just a single whitespace.
        format                  = format.replace(/;?$/, '');                // Removes very last semicolon so isn't split on.

        // Splits the attributes by their semicolon.
        var attributes          = format.split(';');
        // Reset format into object.
        format                  = new Object();

        var entry;
        for (var k=0; k<attributes.length; k++) {
            entry               = attributes[k].split(':');
            format[entry[0]]    = entry[1];
        }
    }

    // In FireFox style function has problem with style names that have dashes.
   if (FF) {
       var val;
       for (var i in format) {
           val = addPx(i, format[i]);

           if ( !(/-/g.test(i)) ) {
               // No dashes to worry about.
               el.style[i]     = val;

           } else if ( !(/\-moz/gi.test(i)) ) {
               // There is a dash but isn't -moz.
               // Turns dashes into camel case.
               i               = i.toLowerCase().replace(/-(.)/g,  function(match, group1) {
                 return group1.toUpperCase();
               });
               el.style[i]     = val;

           } else {
               // There is a -moz so style name will need to stay.
               el.setAttribute('style', el.getAttribute('style')+' '+i+': '+val+';');
           }
       }
   } else {
       for (var i in format) {
           // If ie lower than 9 and style is a filter...
           if((ie<9) && i == 'filter') {
               // If the element already has a filter...
               if(el.style.filter) {
                   // If the filter being added does not match the filter already applied...
                   if(el.style.filter.indexOf(format[i].substr(0,6)) == -1) {
                       // Append the new filter...
                       el.style.filter += format[i] + ' ';
                   }
                   // If the filter being added does match a filter already applied and it is the alpha filter...
                   // TO DO...
                   // NOTE: If the filter being added does match a filter already applied and it is not alpha, the new value will NOT be updated.
                   else if (format[i].substr(0, 5) == 'alpha'){
                       // Update the alpha filter...
                       var found2 = false;
                       try { var nf = el.filters.item('alpha'); found2 = true; } catch(e) {}
                       if(found2) {
                           el.filters.item('alpha').opacity = (parseInt(format[i].substr(16,3)));
                       }
                   }
               // If the element does not already have a filter...
               } else {
                   el.style.filter = format[i] + ' ';
               }
           // If style is not a filter, proceed as normal.
           } else if(i != 'filter') {
               // Fix implemented for ie having trouble with dashes.
               if ((ie < 9) && (/-/g.test(i))) {
                   // Must call addPx before we camel case the style property name or format[i] will come back undefined since the style property name will have changed (from dashed to camelCase).
                   val = addPx(i, format[i]);

                   i = i.toLowerCase().replace(/-(.)/g,  function(match, group1) {
                     return group1.toUpperCase();
                   });

                   el.style[i] = val;
               }
               else {
                   el.style[i]         = addPx(i, format[i]);
               }
           }

       }
   }

   // Function that determines if 'px' needs to be added to end of value.
    function addPx(name, value) {
       if ( /top|bottom|left|borderRadius|fontSize|right|width|height/gi.test( name ) && /^((\d+(\.\d+)?)|(\.\d+))$/g.test( value ) ){
            return value + 'px';
        } else {
            return value;
        }
    }
}

//-----------------------------------------------------------------------------------------
//function that will take an element and center it with in its parrent while taking the
//hieght and width of its child elemet
//========================================================================================
// div          = element
//-----------------------------------------------------------------------------------------
function centerDynamicDiv(div) {
    if(div) {
        div.firstChild.style.width='auto';
        div.firstChild.style.height='auto';
        div.style.width=div.firstChild.offsetWidth+'px';
        div.style.height=div.firstChild.offsetHeight+'px';
        div.style.left=(div.parentNode.offsetWidth/2)-(div.offsetWidth/2)+'px';
        div.style.top=(div.parentNode.offsetHeight/2)-(div.offsetHeight/2)+'px';
        div.style.position='absolute';
    }
}

//-----------------------------------------------------------------------------------------
//function that will center an element with defined size with in its parent as long as the
//parent has defined size
//***********************************<---NOTES--->*****************************************
//if you add images using the html img tag you will have to give the image dimensions with
//width and height or it will think that is 0 and the img will not be centered
//=========================================================================================
// div          = element
//-----------------------------------------------------------------------------------------
function centerDiv(div) {
    if(div){
        if(div.parentNode.style.borderWidth.substr(0,1)) {
            div.style.top=((div.parentNode.offsetHeight-parseInt(div.parentNode.style.borderWidth.substr(0,1))*2)/2)-(div.offsetHeight/2)+'px';
            div.style.left=((div.parentNode.offsetWidth-parseInt(div.parentNode.style.borderWidth.substr(0,1))*2)/2)-(div.offsetWidth/2)+'px';
        } else {
            div.style.left=(div.parentNode.offsetWidth/2)-(div.offsetWidth/2)+'px';
            div.style.top=(div.parentNode.offsetHeight/2)-(div.offsetHeight/2)+'px';
        }
        div.style.position ='absolute';
    }
}

//-----------------------------------------------------------------------------------------
//function that will vertically center an element with defined size with in its parent as
//long as the parent has defined size
//***********************************<---NOTES--->*****************************************
//if you add images using the html img tag you will have to give the image dimensions with
//width and height or it will think that is 0 and the img will not be centered
//=========================================================================================
// div          = element
//-----------------------------------------------------------------------------------------
function verticallyCenterDiv(div) {
    if(div){
        if(div.parentNode.style.borderWidth.substr(0,1)) {
            div.style.top=((div.parentNode.offsetHeight-parseInt(div.parentNode.style.borderWidth.substr(0,1))*2)/2)-(div.offsetHeight/2)+'px';
        } else {
            div.style.top=(div.parentNode.offsetHeight/2)-(div.offsetHeight/2)+'px';
        }
        div.style.position ='absolute';
    }
}



// A generic function for retreiving the text contents of an element
function text(e) {
    var t = '';

    // If an element was passed, get its chiildren,
    // otherwise assume it's an array
    e = e.childNodes || e;

    // Look through all child nodes
    for ( var j = 0; j < e.length; j++) {
        // If it's not an element, append its text value
        // otherwise, recurse through all the element's children
        t += e[j].nodeType != 1 ? e[j].nodeValue : ssm_base.text(e[j].childNodes);
    }

    return t;
}



//-----------------------------------------------------------------------------------------
//function that will add border radius to an element
//========================================================================================
// element       = element
// rad          = desired radius
//-----------------------------------------------------------------------------------------
function addRadius(element, rad) {
    styleEl(element, {
        borderRadius:               rad+'px',
        '-webkit-border-radius':    rad+'px',
        '-moz-border-radius':       rad+'px'
    });
}

//-----------------------------------------------------------------------------------------
//Event removing function
//=========================================================================================
// el           = element
// type         = type of event
// handler      = function that will respond to the event
//-----------------------------------------------------------------------------------------
function removeEvent(el, type, handler) {
    if(el.removeEventListener) {
        el.removeEventListener(type, handler, false);
    } else {
        el.detachEvent('on'+type, handler);
    }
}

function isAChildOf(_parent, _child) {
    if (_parent === _child) {
        return false;
    }
    while (_child && _child !== _parent) {
        _child = _child.parentNode;
    }

    return _child === _parent;
}

/**
* This function is used to truncateText multi line of texts that exceeds the container's height.
*
* @author              Rex Wang
* @modified date       May 22, 2013
* @param span          The span contains the text.
* @param max_height    The max_height is the container's max height.
*
* @return              null
*/
function truncateMultiLineText(span, max_height)  {
    var span_height = span.innerHTML.length;

    while(span.offsetHeight > max_height) {
        span_height--;
        var temp = span.innerHTML.substr(0, span_height);
        temp += '...';
        span.innerHTML = temp;
    }
}

/**
* This function is used to truncateText text that exceeds the container's width.
*
* @author              Rex Wang
* @modified date       May 22, 2013
* @param span          The span contains the text.
* @param max_height    The max_height is the container's max width.
*
* @return              null
*/
function truncateText(span, max_width) {
    var span_width = span.offsetWidth;

    while(span.offsetWidth > max_width) {
        span_width--;
        var temp = span.innerHTML.substr(0, span_width);
        temp += '...';
        span.innerHTML = temp;
    }
}


//-----------------------------------------------------------------------------------------
//A function that will take flash colors fromvars and return an array of html colors
//=========================================================================================
// color = json object of flash colors
//-----------------------------------------------------------------------------------------
function getColors(color) {
    var temp = [];
    for(var i in color) {
        if(color[i]) {
            temp.push('#'+(color[i].Hex).substr(2,(color[i].Hex).length));
      //made the array into an object with names of colors as keys to the color
      temp[color[i].ColorName] = '#'+(color[i].Hex).substr(2, (color[i].Hex).length);
        } else {
            temp.push('#000');
        }

    }
    return temp;
};


// UTF-8 encoder and decoder 
// src  https://gist.github.com/tudisco/309475
var UTF8 = {
	encode: function(s){
		for(var c, i = -1, l = (s = s.split("")).length, o = String.fromCharCode; ++i < l;
			s[i] = (c = s[i].charCodeAt(0)) >= 127 ? o(0xc0 | (c >>> 6)) + o(0x80 | (c & 0x3f)) : s[i]
		);
			return s.join("");
	},
	decode: function(s){
		for(var a, b, i = -1, l = (s = s.split("")).length, o = String.fromCharCode, c = "charCodeAt"; ++i < l;
			((a = s[i][c](0)) & 0x80) &&
			(s[i] = (a & 0xfc) == 0xc0 && ((b = s[i + 1][c](0)) & 0xc0) == 0x80 ?
			o(((a & 0x03) << 6) + (b & 0x3f)) : o(128), s[++i] = "")
		);
			return s.join("");
	}
};


//---------------------------------------------------------------------------------------
// A function that will decode html entities out of a string right now supports & , < ,
// > , " 
//=======================================================================================
// str = string that needs to be decoded
function htmlEntities(str) {
    return String(str).replace(/&amp;/g, '&').replace(/&lt;/g, '<').replace(/&gt;/g, '>').replace(/&quot;/g, '"');
}



//-----------------------------------------------------------------------------------------
// A shrinking function based on a single line span
//=========================================================================================
// el = element to be shrunk a span element
//-----------------------------------------------------------------------------------------
function shrinkText(el) {
    if(el) {
        var fontSize = el.parentNode.style.fontSize;
        var conWidth = el.parentNode.offsetWidth;
        while((el.offsetWidth > conWidth) && el.parentNode.style.fontSize != '8px') {
            el.parentNode.style.fontSize = (parseFloat(el.parentNode.style.fontSize.substr(0, el.parentNode.style.fontSize.length-2))-0.5)+'px'
        }
        if(el.parentNode.style.fontSize == '8px' && (el.offsetWidth > conWidth)) {
            truncateText(el, conWidth);
        }
    }
}

//-----------------------------------------------------------------------------------------
// A shrinking function based on a multiline span
//=========================================================================================
// el = element to be shrunk a span element
//-----------------------------------------------------------------------------------------
function shrinkMultiText(el) {
    if(el) {
        var fontSize = el.parentNode.style.fontSize;
        var conHeight = el.parentNode.offsetHeight;
        while((el.offsetHeight > conHeight) && el.parentNode.style.fontSize != '8px') {
            el.parentNode.style.fontSize = (parseFloat(el.parentNode.style.fontSize.substr(0, el.parentNode.style.fontSize.length-2))-0.5)+'px'
            if(el.parentNode.style.lineHeight && el.parentNode.style.lineHeight != 'normal') {
                el.parentNode.style.lineHeight = (parseFloat(el.parentNode.style.lineHeight.substr(0, el.parentNode.style.lineHeight.length-2))-0.5)+'px'
            }
        }
        if(el.parentNode.style.fontSize == '8px' && (el.offsetHeight > conHeight)) {
            truncateMultiLineText(el, conHeight);
        }
    }
}

/*
*-----------------------------------------------------------------------------------------
* A new shrinking function that will handle both multi and sing line text
*=========================================================================================
* el (@SPANELEMENT) = span to be shrunk
*-----------------------------------------------------------------------------------------
*/
function shrink(el) {
    if(el && el.parentNode.style.fontSize) {
        var fontSize = el.parentNode.style.fontSize;
        var conHeight = el.parentNode.offsetHeight;
        var conWidth = el.parentNode.offsetWidth;
        while(((el.offsetWidth > conWidth) || (el.offsetHeight > conHeight)) && (el.parentNode.style.fontSize != '8px')) {
            el.parentNode.style.fontSize = (parseFloat(el.parentNode.style.fontSize.substr(0, el.parentNode.style.fontSize.length-2))-0.5)+'px'
            if(el.parentNode.style.lineHeight && el.parentNode.style.lineHeight != 'normal') {
                el.parentNode.style.lineHeight = (parseFloat(el.parentNode.style.lineHeight.substr(0, el.parentNode.style.lineHeight.length-2))-0.5)+'px'
            }
        }
        if(((el.offsetWidth > conWidth) || (el.offsetHeight > conHeight)) && (el.parentNode.style.fontSize == '8px')) {
            truncateMultiLineText(el, conHeight);
            truncateText(el, conWidth);
        }
    }
}

//-----------------------------------------------------------------------------------------
// A function to lighten or to darken a color
//=========================================================================================
// color = a hex string of color
// val = a value as an integer that will lighten or darken a color
//-----------------------------------------------------------------------------------------
function lightenDarkenColor(color, val) {
    var r = parseInt(color.substr(1,2), 16);
    var g = parseInt(color.substr(3,2), 16);
    var b = parseInt(color.substr(5,2), 16);

    r = parseInt(r+r*(1-(val/100)));
    g = parseInt(g+g*(1-(val/100)));
    b = parseInt(b+b*(1-(val/100)));
    return '#'+r.toString(16)+g.toString(16)+b.toString(16);
}

// Testing a new method as the above function sometimes does not work.
// To lighten use positive percent. ex: 40.
// To darken use negative percent. ex: -40.
function lightenDarkenColor2(color, val) {

    var r = parseInt(color.substring(1,3),16);
    var g = parseInt(color.substring(3,5),16);
    var b = parseInt(color.substring(5,7),16);

    r = parseInt(r * (100 + val) / 100);
    g = parseInt(g * (100 + val) / 100);
    b = parseInt(b * (100 + val) / 100);

    r = (r<255)?r:255;
    g = (g<255)?g:255;
    b = (b<255)?b:255;

    var rr = ((r.toString(16).length==1)?"0"+r.toString(16):r.toString(16));
    var gg = ((g.toString(16).length==1)?"0"+g.toString(16):g.toString(16));
    var bb = ((b.toString(16).length==1)?"0"+b.toString(16):b.toString(16));

    return "#"+rr+gg+bb;
}

function testingLightColor(color, percent) {
    var num = parseInt(color.slice(1),16), amt = Math.round(2.55 * percent), R = (num >> 16) + amt, B = (num >> 8 & 0x00FF) + amt, G = (num & 0x0000FF) + amt;
    return "#" + (0x1000000 + (R<255?R<1?0:R:255)*0x10000 + (B<255?B<1?0:B:255)*0x100 + (G<255?G<1?0:G:255)).toString(16).slice(1);
}


/**
* This function is used to dynamically change the text color according to background color
*
* @author              Rex Wang
* @modified date       May 22, 2013
* @param color         The color is the background color, it has this format: #000000
* @param selector      The selector is the text element
*
* @return              null
*/
function checkColor(color, selector) {
    if (isColorLight(color.replace('#', '0x'))) {
        selector.style.color = '#000';
    } else {
        selector.style.color = '#FFF';
    }
}

/**
* This function is used to determine if the color is light or dark
*
* @author              Rex Wang
* @modified date       May 22, 2013
* @param hex           The hex is the color that needs to be test, it has this format: 0xffffff.
*
* @return              null
*/
function isColorLight(hex, threshold) {
    var r = ( 0xFF0000 & hex ) >> 16;
    var g = ( 0x00FF00 & hex ) >> 8;
    var b = ( 0x0000FF & hex );

    threshold = (threshold) ? threshold: 140;

    if (threshold < 0) {
        threshold   = 0;
    } else if (threshold > 255) {
        threshold   = 255;
    }

    if ( (((r * 299) + (g * 587) + (b * 114)) / 1000) > threshold )
        return true
    else
        return false;
}

/**
* This function is used to convert a hex color to rgb.
*
* @author              Chris Brenner (Taken and edited from Tim Down on StackOverflow)
* @modified date       Sept 13, 2013
* @param hex           The hex is the color that needs to be converted to rgb.
*
* @return              The nex rgb color.
*/
function hexToRgb(hex) {
    // Expand shorthand form (e.g. "03F") to full form (e.g. "0033FF")
    var shorthandRegex = /^#?([a-f\d])([a-f\d])([a-f\d])$/i;
    hex = hex.replace(shorthandRegex, function(m, r, g, b) {
        return r + r + g + g + b + b;
    });

    var result = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(hex);
    return result ? {
        r: parseInt(result[1], 16),
        g: parseInt(result[2], 16),
        b: parseInt(result[3], 16)
    } : null;
}

/**
* This function is used to convert a rgb color to hex.
*
* @author              Chris Brenner (Taken and edited from Tim Down on StackOverflow)
* @modified date       Sept 13, 2013
* @param rgb           The rgb is the color that needs to be converted to hex.
*
* @return              The new hex color.
*/

function rgbToHex(color) {
    if (color.substr(0, 1) === "#") {
        return color;
    }
    var nums = /(.*?)rgb\((\d+),\s*(\d+),\s*(\d+)\)/i.exec(color),
    r = parseInt(nums[2], 10).toString(16),
    g = parseInt(nums[3], 10).toString(16),
    b = parseInt(nums[4], 10).toString(16);
    return "#"+ (
        (r.length == 1 ? "0"+ r : r) +
        (g.length == 1 ? "0"+ g : g) +
        (b.length == 1 ? "0"+ b : b)
    );
}





//-----------------------------------------------------------------------------------------
// A function that will determine if an integer is even or odd
//=========================================================================================
// x = integer to be checked
//-----------------------------------------------------------------------------------------
function isEven(x) { return ( (x%2) == 0 ); }

//-----------------------------------------------------------------------------------------
// A function written into the Object class to determine its length ex var e = {a: 1, b: 2}
// Object.size(e) will return 2
//=========================================================================================
// obj = object whos size needs to be determined
//-----------------------------------------------------------------------------------------
Object.size = function(obj) {
    var size = 0, key;
    for (key in obj) {
        if (obj.hasOwnProperty(key)) size++;
    }
    return size;
};

// Add a new method available on all function values
Function.prototype.getName = function(){
    // Find zero or more non-paren chars after the function start
    return /function ([^(]*)/.exec( this+"" )[1];
};

//-----------------------------------------------------------------------------------------
// A cloning function that will take an element and return its clone
//=========================================================================================
// el = element that needs to be cloned
//-----------------------------------------------------------------------------------------
function clone(el) {
    var nodes=[], values=[];
    var cloned = document.createElement(el.tagName);
    for (var attr, i=0, attrs=el.attributes, l=attrs.length; i<l; i++) {
        if(attrs[i].specified) {
            attr = attrs.item(i)
            if(ie && attr.nodeName == 'style') {
                cloned.style.setAttribute("cssText", el.style.cssText);
            } else {
                cloned.setAttribute(attr.nodeName, attr.nodeValue);
            }
        }
    }
    cloned.innerHTML = el.innerHTML;
    return cloned;
}



//-----------------------------------------------------------------------------------------
// This function checks if an element has the specified class
//=========================================================================================
// element = The element being evaluated.
// cls = The class being searched for.
//-----------------------------------------------------------------------------------------
function hasClass(element, cls) {
    return (' ' + element.className + ' ').indexOf(' ' + cls + ' ') > -1;
}



//-----------------------------------------------------------------------------------------
// This function checks if a string has a valid value.
//=========================================================================================
// str = The string being evaluated.
//-----------------------------------------------------------------------------------------
function isValid(str) {
    if (str && str != 'null' && str != 'undefined' && str != '' && str != ' ' && str != null) {
        return true;
    } else {
        return false;
    }
}




// ----------------------------------------------------------
// A short snippet for detecting versions of IE in JavaScript
// without resorting to user-agent sniffing
// ----------------------------------------------------------
// If you're not in IE (or IE version is less than 5) then:
// ie === undefined
// If you're in IE (>=5) then you can determine which version:
// ie === 7; // IE7
// Thus, to detect IE:
// if (ie) {}
// And to detect the version:
// ie === 6 // IE6
// ie > 7 // IE8, IE9 ...
// ie < 9 // Anything less than IE9
// ----------------------------------------------------------

// UPDATE: Now using Live NodeList idea from @jdalton
var ie = (function(){

    var undef,
    v = 3,
    div = document.createElement('div'),
    all = div.getElementsByTagName('i');

    while (
        div.innerHTML = '<!--[if gt IE ' + (++v) + ']><i></i><![endif]-->',
        all[0]
    );

    return v > 4 ? v : undef;

}());

//detects if safari is being used
var safari = (function(){
    return Object.prototype.toString.call(window.HTMLElement).indexOf('Constructor') > 0;
}());
//detects if fire fox is being used
var FF = (function() {return (document.getBoxObjectFor != null || window.mozInnerScreenX != null);}());


//taken from stack overflow
function isInDOMTree(node) {
    // If the farthest-back ancestor of our node has a "body"
    // property (that node would be the document itself),
    // we assume it is in the page's DOM tree.
    return !!(findUltimateAncestor(node).body);
}

function findUltimateAncestor(node) {
    // Walk up the DOM tree until we are at the top (parentNode
    // will return null at that point).
    // NOTE: this will return the same node that was passed in
    // if it has no ancestors.
    var ancestor = node;
    while(ancestor.parentNode) {
        ancestor = ancestor.parentNode;
    }
    return ancestor;
}

function executeOnLoad(node, func) {
    // This function will check, every tenth of a second, to see if
    // our element is a part of the DOM tree - as soon as we know
    // that it is, we execute the provided function.
    if(isInDOMTree(node)) {
        func();
    } else {
        setTimeout(function() { executeOnLoad(node, func); }, 100);
    }
}


function increase_brightness(hex, percent){
  // strip the leading # if it's there
  hex = hex.replace(/^\s*#|\s*$/g, '');

  // convert 3 char codes --> 6, e.g. `E0F` --> `EE00FF`
  if(hex.length == 3){
    hex = hex.replace(/(.)/g, '$1$1');
  }

  var r = parseInt(hex.substr(0, 2), 16),
    g = parseInt(hex.substr(2, 2), 16),
    b = parseInt(hex.substr(4, 2), 16);

  return '#' +
           ((0|(1<<8) + r + (256 - r) * percent / 100).toString(16)).substr(1) +
         ((0|(1<<8) + g + (256 - g) * percent / 100).toString(16)).substr(1) +
         ((0|(1<<8) + b + (256 - b) * percent / 100).toString(16)).substr(1);
}

function addEvent(target, type, callback, capture) {
  if ( typeof target.addEventListener != 'undefined') {
    if( type == 'mouseenter') {
      var mouseEnter = function(event) {
        var from = event.relatedTarget ? event.relatedTarget : event.fromElement;
        var to = event.target ? event.target : event.toElement;
        if(!from || (isAChildOf(from, this) && (isAChildOf(this, to)|| this === to)) || (this != from && !(isAChildOf(this, from)))) {
          callback(event);
        }
      }
      target.addEventListener('mouseover', mouseEnter, capture);
    } else if ( type == 'mouseleave' ) {
      var mouseLeave = function(event) {
        var from = event.target ? event.target : event.fromElement;
        var to = event.relatedTarget ? event.relatedTarget : event.toElement;
        if (!to || (isAChildOf(to, this)&&(isAChildOf(this,from) || this === from)) ||( this != to && !(isAChildOf(this, to)))) {
          callback(event);
        }
      }
      target.addEventListener('mouseout', mouseLeave, capture);

    } else {
      target.addEventListener(type, callback, capture);
    }
  } else if (typeof target.attachEvent != 'undefined') {
    target.attachEvent('on' + type, callback);
  } else {
    target['on' + type] = callback;
  }
}

/*
 * This function will create a duplicate image to get it's unstyled/unaltered width and height.
 * This is used to replace naturalWidth and naturalHeight as ie 7&8 don't support them.
 */
function getNatural (DOMelement) {
    var img = new Image();
    img.src = DOMelement.src;

    return {width: img.width, height: img.height};
}

function loadImg(img, divH, divW) {
    var imgH = (ie < 9) ? getNatural(img).height : img.naturalHeight;
    var imgW = (ie < 9) ? getNatural(img).width : img.naturalWidth;
  var boxH = parseInt(divH);
  var boxW = parseInt(divW);
  var newH;
  var newW;
  var ratio;
  if(imgH > boxH) {
    ratio = (boxH/imgH);
    newH = (boxH);
    newW = (imgW*ratio);
    if(newW > boxW) {
      ratio = (boxW/imgW);
      newW = boxW;
      newH = (imgH*ratio);
    }
  } else if(imgW > boxW) {
    ratio = (boxW/imgW);
    newW = boxW;
    newH = (imgH*ratio);
    if(newH > boxH) {
      ratio = (boxH/imgH);
      newH = boxH;
      newW = (imgW*ratio);
    }
  } else {
    newH = imgH;
    newW = imgW;
  }
  superStyle(img, {
    width: newW+'px',
    height: newH+'px',
    top: ((boxH/2)-(newH/2))+'px',
    left: ((boxW/2)-(newW/2))+'px'
  });
}



