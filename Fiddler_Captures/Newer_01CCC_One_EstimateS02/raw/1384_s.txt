HTTP/1.1 200 OK
Content-Type: application/x-javascript
Content-Length: 11832
Connection: keep-alive
Date: Sun, 18 Dec 2016 13:37:26 GMT
Last-Modified: Mon, 08 Sep 2014 20:13:13 GMT
ETag: "d5dca2d6bc94ca250c6fad8e5ac50bc0"
Accept-Ranges: bytes
Server: AmazonS3
Age: 83961
X-Cache: Hit from cloudfront
Via: 1.1 0459f84cfc86cb6f46c44cb1d0a8bdc0.cloudfront.net (CloudFront)
X-Amz-Cf-Id: o-Lx_47HJBAWsiwu-y6V9lhLXlrbyj4WcSThdmc-J8E-KEuaCY-EYg==

// SSM javascript template base class

// Global variable needed for vars testing.
var _varsURL;

var SSM_BASE = {

    // Constructor of the class
    createNew: function(name) {
        var self = this;
        var ssm_base = {};
        var r = Math.random();
        var t = new Date().getTime();

        // This function is used to make ajax call, including getting json data,
        // track click events
        // 'varsRequiredParams' (used for tracking) SHOULD BE UPDATED WITH ANY NEW PARAMETERS ADDED TO THE VARS URL.
        ssm_base.ajax = function(callback, url) {
            url = url || SSM_ad_obj.ApDomain + '/products/dynamicwebads/adserving/vars.php?' +
                                                          'AdID='+              SSM_ad_obj.AdID+
                                                          '&AdTagID='+          SSM_ad_obj.AdTagID+
                                                          '&AP_Params='+        encodeURIComponent(SSM_ad_obj.AP_Params)+
                                                          '&ap_sourcetag='+     SSM_ad_obj.ap_sourcetag+
                                                          '&ClientTrackingID='+ ((SSM_ad_obj.ClientTrackingID) ? (encodeURIComponent(SSM_ad_obj.ClientTrackingID)) : (''))+
                                                          '&ip='+               SSM_ad_obj.ip+
                                                          '&OneAdID='+          SSM_ad_obj.OneAdID+
                                                          '&r='+                r+
                                                          '&t='+                t+
                                                          '&TrackingID='+       SSM_ad_obj.TrackingID+
														  '&'+ 				    decodeURIComponent(SSM_ad_obj.trackerVars)+
                                                          '&url='+              encodeURIComponent(SSM_ad_obj.PageURL)+
                                                          '&use_json=1';


            // Create a copy of the vars url that will be used for testing.
            _varsURL = url;

            // For debuging, use local json file
            //url='http://cb_dev.cb.dev.admin.speedshiftmedia.com/products/dynamicwebads/adserving/htmlbackup/jstemplate/js/app/shuffle/json/sample_160x600.json';
		
			SSM_BASE.run = this;

            // Create XMLHTTPRequest object
            var httpRequest;
            if (window.XMLHttpRequest) {
                httpRequest = new XMLHttpRequest();
            } else if (window.ActiveXObject) {
                // we have to do this because Internet Explorer is stupid
                httpRequest = new ActiveXObject("Microsoft.XMLHTTP");
            }

            httpRequest.onreadystatechange = function() {
                // Check status of our request
                // this is called on every state change
                if (httpRequest.readyState == 4 && httpRequest.status == 200) {
                    // call the callback function
                    callback.call(httpRequest.responseText);
                } else if(httpRequest.readyState == 4 && httpRequest.status == 204) {
		    		callback.call();
				}
            };

            httpRequest.open("GET", url, true);
            httpRequest.send();
        };

        // Function that can be called to test all parameters in vars.
		ssm_base.varsCheck = function() {
            console.log('%c' + '~**~ VARS CHECK STARTED ~**~', 'color:' + '#c41a16');
            
            // Arrays used to hold vars parameters.
            var varsArray = [];
            var varsParamKeys = [];
            var varsParamKeyValues = [];

            // Remove the domain info from the vars url and split each key/value pair into individual array items.
            varsArray = _varsURL.split('?')[1].split('&');

            // Take each key and push it into an array so that we have a list of all the keys that have been included in the vars url.
            // This will allow us to confirm all the required keys are present.
            for (var a = 0; a < varsArray.length; a++) {
                var key = varsArray[a].split('=')[0];

                varsParamKeys.push(key);
                varsParamKeyValues[key] = decodeURIComponent(varsArray[a].split('=')[1]);
            }

            // The parameters that are required to be in the vars url.
            // trackerVars is handled seperately since we don't know which values it will hold.
            var varsRequiredParams = new Array('AdID', 'AdTagID', 'AP_Params', 'ap_sourcetag', 'ClientTrackingID', 'ip', 'OneAdID', 'r', 't', 'TrackingID', 'url', 'use_json');

            // Loop through each required parameter and compare it to the array of url keys to make sure nothing is missing.
            for (var i = 0; i < varsRequiredParams.length; i++) {
                // If a key is missing show an error message.
                if (varsParamKeys.indexOf(varsRequiredParams[i]) === -1) {

                    console.warn('%c' + "** ERROR ** - '" + varsRequiredParams[i] + "' is missing from the vars tracking url. Please investigate.", 'color:' + 'red');
                }
                // Otherwise check the values of each key.
                else {
                    switch(varsRequiredParams[i]) {
                        // ap_sourcetag must equal 1 of the 4 javascript loader tags.
                        case 'ap_sourcetag':
                            if (!((varsParamKeyValues[varsRequiredParams[i]] == "javascript") || (varsParamKeyValues[varsRequiredParams[i]] == "jsiframe") || (varsParamKeyValues[varsRequiredParams[i]] == "iframe") || (varsParamKeyValues[varsRequiredParams[i]] == "jsinclude"))) {
                                console.warn('%c' + "** ERROR ** - The '" + varsRequiredParams[i] + "' parameter is incorrectly set. Please investigate.", 'color:' + 'red');
                            }
                            break;
                        case 'ClientTrackingID':
                            if (varsParamKeyValues[varsRequiredParams[i]] == '') {
                                console.warn('%c' + "** WARNING ** - The '" + varsRequiredParams[i] + "' parameter is null. Did you expect this?", 'color:' + '#ee7600');
                            }
                            break;
                        // OneAdID can be null or not null. Send warning for user confirmation.
                        case 'OneAdID':
                            if (varsParamKeyValues[varsRequiredParams[i]] == "") {
                                console.warn('%c' + "** WARNING ** - The '" + varsRequiredParams[i] + "' parameter is null. Did you expect this?", 'color:' + '#ee7600');
                            }
                            break;
                        // use_json must equal '1'.
                        case 'use_json':
                            if (varsParamKeyValues[varsRequiredParams[i]] !== '1' && varsParamKeyValues[varsRequiredParams[i]] !== 1) {
                                console.warn('%c' + "** ERROR ** - The '" + varsRequiredParams[i] + "' parameter is not set to '1'. Please investigate.", 'color:' + 'red');
                            }
                            break;
                        // All other values must be not null.
                        default:
                            if (!isValid(varsParamKeyValues[varsRequiredParams[i]])) {
                                console.warn('%c' + "** ERROR ** - The '" + varsRequiredParams[i] + "' parameter is null. Please investigate.", 'color:' + 'red');
                            }
                    }
                }
            }

            // Check if trackerVars has a value.
            // Use SSM_ad_obj because the 'url' has no key for trackerVars therefore we can't target it to test the 'url' value.
            if (isValid(decodeURIComponent(SSM_ad_obj.trackerVars))) {
                // Decode it.
                var trackerVar = (decodeURIComponent(SSM_ad_obj.trackerVars));    

                // Split on '&' as it can come in as multiple key value pairs.
                var trackerVarArray = trackerVar.split('&');

                // Loop through each key value pair and split they keys and values.
                for (var j = 0; j < trackerVarArray.length; j++) {
                    var trackerVarParam = trackerVarArray[j].split('=');

                    // Values must not be null.
                    if (!isValid(trackerVarParam[1])) {
                        console.warn('%c' + "** ERROR ** - The '" + trackerVarParam[0] + "' trackerVars parameter is null. Please investigate.", 'color:' + 'red');
                    }
                }
            }


            return '~**~ VARS CHECK FINISHED ~**~';
		}

        // for external click tracking
        ssm_base.trackExtClick = function(URL, trackingURL, openMethod) {
            if ( ! URL)
                return;

            openMethod = openMethod || '_blank';
            // if ClickTag exist
            SSM_ad_obj.ClickTag ?
                (SSM_ad_obj.EscapeClickURL == '1' ?
                // if EscapeClickURL equals 1
                URL = decodeURIComponent(SSM_ad_obj.ClickTag)+encodeURIComponent(URL) :
                // if EscapeClickURL equals 0
                URL = decodeURIComponent(SSM_ad_obj.ClickTag)+URL)
            // if ClickTag is not defined
            : '';

            window.open(URL, openMethod);

            if ( ! trackingURL)
                return;

            trackingURL +=
                '&r='+Math.random()+
                '&t='+new Date().getTime();

            ssm_base.ajax( function(){}, trackingURL );
        };

        ssm_base.trackInterClick = function(trackingURL) {
            if ( ! trackingURL)
                return;

            trackingURL +=
                '&r='+Math.random()+
                '&t='+new Date().getTime();

            ssm_base.ajax( function(){}, trackingURL );
        }

        ssm_base.trackClick = function(trackData) {
            if(trackData.url) {
                if(SSM_ad_obj.ClickTag) {
                    var url = (SSM_ad_obj.EscapeClickURL == '1') ? (decodeURIComponent(SSM_ad_obj.ClickTag) + encodeURIComponent(trackData.url))
                                                                 : (decodeURIComponent(SSM_ad_obj.ClickTag) + trackData.url);
                    window.open(url, trackData.open);
                } else {
                    window.open(trackData.url, trackData.open);
                }
            }
            var temp = trackData.track +  '&r='     +Math.random()+
                                          '&t='     +new Date().getTime();
            ssm_base.ajax(function(){}, temp);
        }

        ssm_base.prepareData = function( callback ) {
                ssm_base.ajax( function() {
                var json = JSON.parse(this);
                var colors = getColors(json['colors']);
                self.GlobalJson.set(json);
				//creates globaly accesible color object ex/ SSM_BASE.Color.get
				self.Color.set(colors);
				//once the color has been loaded from JSON stage will be called to update background and border colors
				try{
					STAGE.colorsLoaded();
				} catch(e){
				}
                callback.call({
                    'colors': colors,
                    'json': json
                });
            });
        };

        // return ssm_base object so we can get use it in other class
        return ssm_base;
    },
    GlobalJson : {
            set: function(data) {
                this.get = data;
            }
        },
	Color: {
		set: function(data) {
				this.get = data;
				this.color = function(color, backup) {
					var colors = data;
					return ((colors[color])?(colors[color]):(backup));
				}
			 }
		   }
};


