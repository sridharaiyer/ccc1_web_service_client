HTTP/1.1 200 OK
Content-Type: application/x-javascript
Content-Length: 39627
Connection: keep-alive
Date: Wed, 31 May 2017 18:51:29 GMT
Last-Modified: Wed, 31 May 2017 18:29:33 GMT
ETag: "ca0b2570abde36d495f3dd239cfd496b"
Cache-Control: max-age=86400
Accept-Ranges: bytes
Server: AmazonS3
Age: 62852
X-Cache: Hit from cloudfront
Via: 1.1 ad75de90472243324ece0502a7c0229f.cloudfront.net (CloudFront)
X-Amz-Cf-Id: vmfgHbrKhO7y6qNWPOxfdL67RPvDu5lx9uzTstEdgh59DHkXc4HgQw==

/*
*-----------------------------------------------------------------------------------------------------------------------
*A Tracking object that creates and stores Track Data for an element                                                   *
*=======================================================================================================================
* element           = the DOM element that should be tracked (needs to have a matching class or id inside the json)    *
* type              = type of click (EXTCLICK, ENGAGECLICK, INTROCLICK)                                                *
* url               = target url                                                                                       *
* value             = String that will be passed to the value field in tracking if needed (used on buttons)            *
* group             = group type of the element that is being tracked (item or offer) **Note** AD data elements do not *
*                     need it.                                                                                         *
* openMethod        = The way url will be open if not set it will pass _blank                                          *
*=======================================================================================================================
*******************************************************<== NOTES ==>****************************************************
* @author                  Dmitri D
* @date
* @version                 1.0

* @modify_by               Ryan LaMarche
* @modify_date             August 26 2014
*
* Updated March 1 2014 by Chris B - Added fix in clickTracking that handles Firefox bug where there is no currentTarget.
* Updated August 26 2014 by Ryan L - Added testTracking and accountTracking.
*-----------------------------------------------------------------------------------------------------------------------
*/
var tracking = {

    createNew: function(element, type, url, value, group, openMethod) {
        var json                = SSM_BASE.GlobalJson.get;
        var trackingString      = SSM_ad_obj['tracking_url'];
        var pos                 = (group) ? (element.parentNode.getAttribute('id')) : ('')//gets the position of the element in jso

        //checks to see if ClentTrackingID is set if so sets its value if not it will pass a blank
        var clientTrackingID    = (SSM_ad_obj.ClientTrackingID) ? (encodeURIComponent(SSM_ad_obj.ClientTrackingID)) : ('');

        //sets the Property ID and get a path to the element inside json if the element is part of a group
        if(type == 'ENGAGECLICK') {
			try {
                PropertyID = '';

                if (group) {
                    var classArray = element.getAttribute('class').split(/[ ]+/);

                    for (var i = 0; i < classArray.length; i++) {
                        if (json[group+'s']['group'][0][group][0][classArray[i]]) {
                            PropertyID = json[group+'s']['group'][0][group][0][classArray[i]].id;
                        }
                    }
                }
                else {
                    if ((json[element.getAttribute('id')])) {
                        PropertyID = json[element.getAttribute('id')].id;
                    }
                    else {
                        var classArray = element.getAttribute('class').split(/[ ]+/);

                        for (var j = 0; j < classArray.length; j++) {
                            if (json[classArray[j]]) {
                                PropertyID = json[classArray[j]].id;
                            }
                        }
                    }
                }
			} catch (e) {
				PropertyID = '';
			}
            var helper = (group) ? (json[group+'s']['group'][0][group][0]) : ('');
        } else if(type == 'INTROCLICK' || type == 'INTROCLICK_jump') {
            PropertyID = SSM_ad_obj.IntroCreativeID;
        } else {
			try {
                PropertyID = '';

                if (group) {
                    PropertyID = json[group+'s']['group'][0][group][pos][element.getAttribute('id')].id;
                }
                else {
                    if ((json[element.getAttribute('id')])) {
                        PropertyID = json[element.getAttribute('id')].id;
                    }
                    else {
                        var classArray = element.getAttribute('class').split(/[ ]+/);

                        for (var k = 0; k < classArray.length; k++) {
                            if (json[classArray[k]]) {
                                PropertyID = json[classArray[k]].id;
                            }
                        }
                    }
                }
			} catch (e) {
				PropertyID = '';
			}
            var helper = (group) ? (json[group+'s']['group'][0][group][pos]) : ('');
        }


        //The base tracking String that willl be used by every single click
        var base = trackingString + 'AdID='                 +SSM_ad_obj['AdID']+
                                    '&AdTagID='             +SSM_ad_obj['AdTagID']+
                                    '&AdvertiserID='        +((group) ? (helper.advertiserid) : (json['ownerid']))+
                                    '&ClientTrackingID='    +clientTrackingID +
                                    '&do='                  +'html_backup'+
                                    '&Event='               +((type == 'INTROCLICK_jump') ? 'INTROCLICK' : type)+
                                    '&OneAdID='            +SSM_ad_obj['OneAdID']+
                                    '&PageURL='             +encodeURIComponent(SSM_ad_obj['PageURL'])+
                                    '&PropertyID='          +PropertyID+
                                    '&TrackingID='          +SSM_ad_obj['TrackingID']+
                                    '&UserGuid='            +SSM_ad_obj['UserGuid'];

        //add extra tacking information based on the group that the element belongs to
        switch(group) {
            case 'item':
                base +=             '&InventoryID='         +helper.id+
                                    '&InsertionType='       +((helper.InsertionType.value) ? (helper.InsertionType.value) : (''))+
                                    '&Pos='                 +helper.position+
                                    '&ProductID='       +((helper.ProductID) ? (encodeURIComponent(helper.ProductID.value)) : (''));
                break;
            case 'offer':
                base +=             '&OfferID='             +helper.id+
                                    '&Pos='                 +helper.position+
                                    '&ProductID='           +((helper.specialID) ? (encodeURIComponent(helper.specialID.value)) : (''));
                break;
        }
        //If the click type needs an url it                           Pwill add it to the tracking string
        if(type == 'EXTCLICK' ||             type == 'INTROCLICK') {
            base += '&URL='     + encodeURIComponent(url);
        }
		else if (type == 'INTROCLICK_jump') {
			url = (SSM_ad_obj.EscapeClickURL == '1') ? (decodeURIComponent(SSM_ad_obj.ClickTag) + encodeURIComponent(url)) : (decodeURIComponent(SSM_ad_obj.ClickTag) + url);
            base += '&URL='     + encodeURIComponent(url);
		}
        //if theres a value that has beened passed in than add it to the tracking string
        if(value) {
            base += '&Value='   + encodeURIComponent(value);
        }

		base += '&TRACKERVARS&'+decodeURIComponent(SSM_ad_obj.trackerVars);

        //add the url, tracking string and openMethod to the object
        this.track          = base;
        this.url            = (url) ? (url) : (null);
        this.openMethod     = (openMethod) ? (openMethod) : ((tracking.openMethod)?(tracking.openMethod):(SSM_ad_obj.openMethod));

        // Split so we have only the tracking parameters.
        var urlSplit     = base.split("?");
		
		// Add track URL to array to test.
        _trackURLs.push(urlSplit[1]);

		// Function to collect data about AD being tracked.
        if (!ie) {
		    accountTrack(urlSplit[1], type);
        }
        
        //calculate the ID that will be used to refrence it inside the Archive it is calculated as Inventory ID + property ID for group items and just property ID for ad items
        var trackID = ((group) ? (helper.id+PropertyID) : (PropertyID));
        //set the ID to the element so it can be found easily
        element.setAttribute('trackID', trackID);
        //add a clicking event to the element
        addEvent(element, 'click', clickTracking, false);

        //Add the tracking Data to the archive
        trackDataArchive.addData(trackID, this);
    },

    jsonTracking: function(item, type, needValue, openMethod) {
        json                    = SSM_BASE.GlobalJson.get;
        var helper              = item.path;
        var trackingString      = SSM_ad_obj['tracking_url'];
        //checks to see if ClentTrackingID is set if so sets its value if not it will pass a blank
        var clientTrackingID    = (SSM_ad_obj.ClientTrackingID) ? (encodeURIComponent(SSM_ad_obj.ClientTrackingID)) : ('');

        //The base tracking String that willl be used by every single click
        var base = trackingString + 'AdID='             +SSM_ad_obj['AdID']+
                                    '&AdTagID='         +SSM_ad_obj['AdTagID']+
                                    '&AdvertiserID='    +item.advertiserid+
                                    '&ClientTrackingID=' +clientTrackingID +
                                    '&do='              +'html_backup'+
                                    '&Event='           +type+
                                    '&OneAdID='         +SSM_ad_obj['OneAdID']+
                                    '&PageURL='         +encodeURIComponent(SSM_ad_obj['PageURL'])+
                                    '&PropertyID='      +((helper[item.name])?(helper[item.name].id):(''))+
                                    '&TrackingID='      +SSM_ad_obj['TrackingID']+
									'&UserGuid='        +SSM_ad_obj['UserGuid'];
        switch(item.group) {
            case 'item':
                base +=             '&InventoryID='     +helper.id+
                                    '&InsertionType='   +((helper.InsertionType.value) ? (helper.InsertionType.value) : (''))+
                                    '&Pos='             +helper.position+
                                    '&ProductID='       +((helper.ProductID) ? (encodeURIComponent(helper.ProductID.value)) : (''));
                break;
            case 'offer':
                base +=             '&OfferID='         +helper.id+
                                    '&Pos='             +helper.position+
                                    '&ProductID='       +((helper.specialID) ? (encodeURIComponent(helper.specialID.value)) : (''));
                break;
        }
        var temp        = {};
        //If the click type needs an url it will add it to the tracking string
        if(type == 'EXTCLICK' || type == 'INTROCLICK') {
            base += '&URL='     + encodeURIComponent(item.url);
            temp.url        = item.url;
        }
        //if theres a value that has beened passed in than add it to the tracking string
        if(needValue) {
            base += '&Value='   + encodeURIComponent(item.value);
        }

		base += '&TRACKERVARS&'+decodeURIComponent(SSM_ad_obj.trackerVars);

        temp.track      = base;

        // Split so we have only the tracking parameters.
        var urlSplit     = base.split("?");

		// Add track URL to array to test.
        _trackURLs.push(urlSplit[1]);

		// Function to collect data about AD being tracked.
        if (!ie) {
            accountTrack(urlSplit[1], type);
        }
        
        temp.openMethod = (openMethod) ? (openMethod) : ((tracking.openMethod)?(tracking.openMethod):(SSM_ad_obj.openMethod));

        var trackID     = ((item.group) ? (helper.id+((helper[item.name])?(helper[item.name].id):(''))) : ((helper[item.name])?(helper[item.name].id):('')));

        item.id         = trackID;
        item.html.setAttribute('trackID', trackID);
        trackDataArchive.addData(trackID, temp);
    }
}

/* Global Variables for Test Tracking */
var _extClick       = 0;
var _engClick       = 0;
var _expClick       = 0;
var _introClick     = 0;
var _prevClick      = 0;
var _numCellComp    = 0;
var _numCellProp    = [];
var _numInvItems    = 0;
var _numInvProp     = [];
var _trackURLs      = [];

/** 
* This function will take in the track URL set and the type of click. It will count
* the amount of each type of click and the num of cell components and inv items.
*
* @param trackURL       The tracking URL.
* @param type           The type of click.
*/
function accountTrack(trackUrl, type) {
    // Case statment to determine how many click of each type.
    switch(type) {
        case 'EXTCLICK':
            _extClick++;    
            break;
        case 'ENGAGECLICK':
            _engClick++;
            break;
        case 'EXPANDCLICK':
            _expClick++;
            break;
        case 'INTROCLICK':
            _introClick++;
            break;
        case 'PREVIEWCLICK':
            _prevClick++;
            break;
        default:
            console.log('%c' + '** ERROR ** -- ' + type + ' is not one of the click types. Please investigate.', 'color:' + 'red');
    }
    
    // Calls function to count number of cell components being tracked.
    numCellComponents(trackUrl);

    // Calls function to get number of inventory items.
    numberInvItems(trackUrl);
}

/** 
* This function that will determine the number of cell components being tracked (EXTINV tracking)
* by identifying the number of unique 'PropertyID' properties.
*
* @param trackURL       The tracking URL.
*/
function numCellComponents(trackUrl) {
    // Check if trackUrl has a 'Pos' parameter (ie. if it's an inventory item).
    if (trackUrl.indexOf('Pos') != -1) {
        // Split tracking url into key value pairs.
        var result = trackUrl.split('&');

        // Loop through each key value pair.
        for (var i = 0; i < result.length; i++) {
            // Check each key value pair for the 'PropertyID' property.
            if (result[i].indexOf('PropertyID') != -1) {
                // Split the property into key and value.
                var cellProp = result[i].split('=');

                // Check if this PropertyID value has already been seen.
                // A cell component will have the same PropertyID for each cell so if each cell is tracking a 'header'
                // the PropertyID of 'header' will be the same for each cell and therefore will only be counted once.
                if (_numCellProp.indexOf(cellProp[1]) == -1 && cellProp[1] != '') {
                    // Push the PropertyID value into an array so we can keep track of which PropertyID's have already been counted.
                    _numCellProp.push(cellProp[1]);

                    // Count the number of unique PropertyID's we've seen.
                    // Once all trackingUrl's have been evaluated we will know the max number of cell components being tracked.
                    _numCellComp = _numCellProp.length;
                }
            }
        }
    }
}

/** 
* This function that will determine the number of inventory items by
* identifying the number of unique 'Pos' properties.
*
* @param trackURL       The tracking URL.
*/
function numberInvItems(trackUrl) {
    // Split tracking url into key value pairs.
    var result = trackUrl.split('&');

    // Loop through each key value pair.
    result.forEach(function(entry) {
        // Split the parameter into key and value.
        var params = entry.split('=');

        // Check if parameter equals Pos and if the current Pos value has already been seen.
        if (params[0] == 'Pos' && _numInvProp.indexOf(params[1]) == -1 && params[1] != '') {
            // Push the Pos value into an array so we can keep track of which Pos's have already been counted.
            _numInvProp.push(params[1]);

            // Count the number of unique Pos's we've seen.
            _numInvItems = _numInvProp.length;
        }
    });
}

/**
* This function will be called with 6 params that will determine if tracking values are set correctly.
* It will also display the amount of tracking set by click type and the amount inv items.
* 
* @param extInvC       The amount of EXTERNAL inventory clicks expected.
* @param extNonC       The amount of EXTERNAL NON inventory clicks expected.
* @param engC          The amount of ENGAGE clicks expected.
* @param expC          The amount of EXPAND clicks expected.
* @param introC        The amount of INTRO clicks expected.
* @param prevC         The amount of PREVIEW clicks expected.
*/
function testTrack(extInvC, extNonC, engC, expC, introC, prevC) {
    console.log('%c' + '~**~ TRACKING TEST STARTED ~**~', 'color:' + '#c41a16');

    var clickType   = '';
    var propId      = 0;
    var invPos      = 0;
    var warn1       = false;
    var warn2       = false;
    var warn3       = false;
    var warn4       = false;

    // Loop through each tracking url.
    _trackURLs.forEach(function(trackParamsURL) {
        // The parameters that are required to be in the tracking url.
        // r and t are not checked since they are not added until the actual click takes place.
        // trackerVars is not checked since we don't know which values it will hold.
        var trackingRequiredParams = new Array('AdID', 'AdTagID', 'AdvertiserID', 'ClientTrackingID', 'do', 'Event', 'OneAdID', 'PageURL', 'PropertyID', 'TrackingID', 'UserGuid', 'URL');
        var inventoryRequiredParams = new Array('InventoryID', 'InsertionType', 'Pos', 'ProductID');

        // Split into key value pairs.
        var result = trackParamsURL.split('&');

        // Loop through each key value pair of a tracking url.
        // Grabs the PropertyID and Pos for an element to identify which element is being checked.
        result.forEach(function(list) {
            // Split into keys and values.
            var tparam = list.split('=');
            
            // Get click type.
            if (tparam[0] == 'Event') {
                clickType = tparam[1];                
            }

            // Get PropertyID value.
            if (tparam[0] == 'PropertyID') {
                propId = tparam[1];
            }
            
            // Get Pos value if there is one.
            if (tparam[0] == 'Pos') {
                invPos = tparam[1];
            }                
        });

        // Loop through each required parameter and compare it to the tracking url to make sure nothing is missing.
        for (var i = 0; i < trackingRequiredParams.length; i++) {
            // Because the string 'AdID' is also contained within the string 'OneAdID'
            // (and will therefore show up in an indexOf search even if 'AdID' is not present but 'OneAdID' is)
            // we need to do extra checks on the 'AdID' to confirm whether it is present or not.
            if (trackingRequiredParams[i] == 'AdID') {
                // Get index of both 'AdID' and 'OneAdID.'
                var adIDIndex = trackParamsURL.indexOf('AdID=');
                var oneAdIDIndex = trackParamsURL.indexOf('OneAdID=');

                // If 'AdID' is not found show an error. 'OneAdID' will be tested (and fail) below and will be handled there.
                if (adIDIndex === -1) {

                    console.warn('%c' + "** ERROR ** - '" + trackingRequiredParams[i] + "' is missing from the tracking url on the element with PropertyID = '" + propId + "'. Please investigate.'", 'color:' + 'red');
                }
                // If the index of 'AdID' and 'OneAdID' + 3 (to account for the first 3 digits of 'OneAdID') match
                // it means 'AdID' was found but as a part of 'OneAdID' instead of on its own. This confirms that
                // 'OneAdID' exists but not whether 'AdID' exists so we need to do another indexOf search starting
                // 1 digit past the 'AdID' that was just matched to see if we can find the actual 'AdID'.
                // If the index values didn't match it means they both exist and we are happy.
                else if ((adIDIndex == oneAdIDIndex + 3) && oneAdIDIndex != -1) {
                    var newAdIDIndex = trackParamsURL.indexOf('AdID=', oneAdIDIndex + 4);

                    // No more matches were found therefore 'AdID' is missing and we need to show an error.
                    if (newAdIDIndex === -1) {

                        console.warn('%c' + "** ERROR ** - '" + trackingRequiredParams[i] + "' is missing from the tracking url on the element with PropertyID = '" + propId + "'. Please investigate.'", 'color:' + 'red');
                    }
                }
            }
            // Because the string 'TrackingID' is also contained within the string 'ClientTrackingID'
            // (and will therefore show up in an indexOf search even if 'TrackingID is not present but 'ClientTrackingID' is)
            // we need to do extra checks on the 'TrackingID' to confirm whether it is present or not.
            else if (trackingRequiredParams[i] == 'TrackingID') {
                // Get index of both 'TrackingID' and 'ClientTrackingID.'
                var trackingIDIndex = trackParamsURL.indexOf('TrackingID=');
                var clientTrackingIDIndex = trackParamsURL.indexOf('ClientTrackingID=');

                // If 'TrackingID' is not found show an error. 'ClientTrackingID' will be tested (and fail) below and will be handled there.
                if (trackingIDIndex === -1) {

                    console.warn('%c' + "** ERROR ** - '" + trackingRequiredParams[i] + "' is missing from the tracking url on the element with PropertyID = '" + propId + "'. Please investigate.'", 'color:' + 'red');
                }
                // If the index of 'TrackingID' and 'ClientTrackingID' + 6 (to account for the first 6 digits of 'ClientTrackingID') match
                // it means 'TrackingID' was found but as a part of 'ClientTrackingID' instead of on its own. This confirms that
                // 'ClientTrackingID' exists but not whether 'TrackingID' exists so we need to do another indexOf search starting
                // 1 digit past the 'TrackingID' that was just matched to see if we can find the actual 'TrackingID'.
                // If the index values didn't match it means they both exist and we are happy.
                else if ((trackingIDIndex == clientTrackingIDIndex + 6) && clientTrackingIDIndex != -1) {
                    var newTrackingIDIndex = trackParamsURL.indexOf('TrackingID=', clientTrackingIDIndex + 7);

                    // No more matches were found therefore 'TrackingID' is missing and we need to show an error.
                    if (newTrackingIDIndex === -1) {

                        console.warn('%c' + "** ERROR ** - '" + trackingRequiredParams[i] + "' is missing from the tracking url on the element with PropertyID = '" + propId + "'. Please investigate.'", 'color:' + 'red');
                    }
                }
            }
            // Only confirm that there is a URL if the click type is EXTCLICK or INTROCLICK.
            // Because the string 'URL' is also contained within the string 'PageURL'
            // (and will therefore show up in an indexOf search even if 'URL' is not present but 'PageURL' is)
            // we need to do extra checks on the 'URL' to confirm whether it is present or not.
            else if (trackingRequiredParams[i] == 'URL') {
                if (clickType == 'EXTCLICK' || clickType == 'INTROCLICK') {
                    // Get index of both 'URL' and 'PageURL.'
                    var urlIndex = trackParamsURL.indexOf('URL=');
                    var pageURLIndex = trackParamsURL.indexOf('PageURL=');

                    // If 'URL' is not found show an error. 'PageURL' will be tested (and fail) below and will be handled there.
                    if (urlIndex === -1) {

                        console.warn('%c' + "** ERROR ** - '" + trackingRequiredParams[i] + "' is missing from the tracking url on the element with PropertyID = '" + propId + "'. Please investigate.'", 'color:' + 'red');
                    }
                    // If the index of 'URL' and 'PageURL' + 4 (to account for the first 4 digits of 'PageURL') match
                    // it means 'URL' was found but as a part of 'PageURL' instead of on its own. This confirms that
                    // 'PageURL' exists but not whether 'URL' exists so we need to do another indexOf search starting
                    // 1 digit past the 'URL' that was just matched to see if we can find the actual 'URL'.
                    // If the index values didn't match it means they both exist and we are happy.
                    else if ((urlIndex == pageURLIndex + 4) && pageURLIndex != -1) {
                        var newPageURLIndex = trackParamsURL.indexOf('URL=', pageURLIndex + 5);

                        // No more matches were found therefore 'URL' is missing and we need to show an error.
                        if (newPageURLIndex === -1) {

                            console.warn('%c' + "** ERROR ** - '" + trackingRequiredParams[i] + "' is missing from the tracking url on the element with PropertyID = '" + propId + "'. Please investigate.'", 'color:' + 'red');
                        }
                    }
                }
            }
            // If any other key is missing show an error message.
            else if (trackParamsURL.indexOf(trackingRequiredParams[i]) === -1) {

                console.warn('%c' + "** ERROR ** - '" + trackingRequiredParams[i] + "' is missing from the tracking url on the element with PropertyID = '" + propId + "'. Please investigate.'", 'color:' + 'red');
            }
        }

        // Loop through each additional inventory parameter and compare it to the tracking url to make sure nothing is missing.
        if (invPos !== 0) {
            for (var j = 0; j < inventoryRequiredParams.length; j++) {
                // If a key is missing show an error message.
                if (trackParamsURL.indexOf(inventoryRequiredParams[j]) === -1) {

                    console.warn('%c' + "** ERROR ** - '" + inventoryRequiredParams[j] + "' is missing from the tracking url on the element with PropertyID = '" + propId + "' and inventory position = '" + invPos + ". Please investigate.'", 'color:' + 'red');
                }
            }
        }
        
        // Loop through each key value pair of a tracking url.
        // Test each parameter to see if it has proper tracking value assigned.
        result.forEach(function(entry) {

            // Split into keys and values.
            var params = entry.split('=');

            // If invPos is equal to zero it means the tracking url did not have a Pos parameter and is therefore not an inventory item.
            if (invPos == 0) {
                switch(params[0]) {
                    // If ClientTrackingID or OneAdID are set incorrectly VARS will already have given a warning or error message so we don't need another one here.
                    case 'ClientTrackingID':
                        if (params[1] == '') {
                                console.warn('%c' + "** WARNING ** -- The '" + params[0] + "' parameter is null on the element with PropertyID = '" + propId + "'. Did you expect this?", 'color:' + '#ee7600');
                            }
                        break; 
                    case 'OneAdID':
                        if (params[1] == '') {
                                console.warn('%c' + "** WARNING ** -- The '" + params[0] + "' parameter is null on the element with PropertyID = '" + propId + "'. Did you expect this?", 'color:' + '#ee7600');
                            }
                        break;
                     // do must equal 'html_backup'.
                    case 'do':
                        if (params[1] != 'html_backup') {
                            console.error('%c' + "** ERROR ** -- The '" + params[0] + "' parameter is not set to 'html_backup' on the element with PropertyID = '" + propId + "'. Please investigate.'", 'color:' + 'red');
                        }
                        break;
                    // UserGuid can be null or not null. Send warning for user confirmation.
                    case 'UserGuid':
                        if (params[1] == '') {
                            console.warn('%c' + "** WARNING ** -- The '" + params[0] + "' parameter is null on the element with PropertyID = '" + propId + "'. Did you expect this?", 'color:' + '#ee7600');
                        }
                        break;
                    // All other values must be not null.
                    default:
                        if (params[1] == '') {
                            console.error('%c' + "** ERROR ** -- The '" + params[0] + "' parameter is null on the element with PropertyID = '" + propId + "'. Please investigate.'", 'color:' + 'red');
                        }
                }
            }
            // These have a Pos parameter and are therefore inventory items and will be tested in additional ways compared to non-inventory items.
            else {
                switch(params[0]) {
                    // If ClientTrackingID or OneAdID are set incorrectly VARS will already have given a warning or error message so we don't need another one here.
                    case 'ClientTrackingID':
                        if (params[1] == '' && warn1 == false) {
                            console.warn('%c' + "** WARNING ** -- The '" + params[0] + "' parameter is null on the element with PropertyID = '" + propId + "' and possibly other inventory items. Did you expect this?", 'color:' + '#ee7600');
                            warn1 = true;
                        }
                        break;
                    case 'OneAdID':
                        if (params[1] == '' && warn2 == false) {
                            console.warn('%c' + "** WARNING ** -- The '" + params[0] + "' parameter is null on the element with PropertyID = '" + propId + "' and possibly other inventory items. Did you expect this?", 'color:' + '#ee7600');
                            warn2 = true;
                        }
                        break;
                    // do must equal 'html_backup'.
                    case 'do':
                        if (params[1] != 'html_backup') {
                            console.error('%c' + "** ERROR ** -- The '" + params[0] + "' parameter is incorrectly set on the element with PropertyID = '" + propId + "' and possibly other inventory items. Please investigate.", 'color:' + 'red');
                        }
                        break;
                    // UserGuid can be null or not null. Send warning for user confirmation.
                    case 'UserGuid':
                        if (params[1] == '' && warn3 == false) {
                            console.warn('%c' + "** WARNING ** -- The '" + params[0] + "' parameter is null on the element with PropertyID = '" + propId + "' and possibly other inventory items. Did you expect this?", 'color:' + '#ee7600');
                            warn3 = true;
                        }
                        break;
                    // ProductID is null for publishers that are not using retargeting. Send warning for user confirmation.
                    case 'ProductID':
                        if (params[1] == '' && warn4 == false) {
                            console.warn('%c' + "** WARNING ** -- The '" + params[0] + "' parameter is null on the element with PropertyID = '" + propId + "' and possibly other inventory items. Did you expect this?", 'color:' + '#ee7600');
                            warn4 = true;
                        }
                        break;
                    // All other values must be not null.
                    default:
                        if (params[1] == '') {
                            console.error('%c' + "** ERROR ** -- The '" + params[0] + "' parameter is null on the element with PropertyID = '" + propId + "' and inventory position = '" + invPos + "'. Please investigate.'", 'color:' + 'red');
                        }
                }
            }
        });

        // Reset values.
        propId = 0;
        invPos = 0;
    });
    
    // Check to see if number of tracked items matches the testers expected values.
    var extClickInv = _numCellComp; 
    var extClickNon = _extClick - (extClickInv * _numInvItems);

    console.assert(extInvC  == extClickInv, 'The amount of EXT CLICKS for INV items is INCORRECT. Tracking may NOT be set correctly.');
    console.assert(extNonC  == extClickNon, 'The amount of EXT CLICKS for NON INV items is INCORRECT. Tracking may NOT be set correctly.');
    console.assert(engC     == _engClick,   'The amount of ENGAGE CLICKS is INCORRECT. Tracking may NOT be set correctly.');
    console.assert(expC     == _expClick,   'The amount of EXPAND CLICKS is INCORRECT. Tracking may NOT be set correctly.');
    console.assert(introC   == _introClick, 'The amount of INTRO CLICKS  is INCORRECT. Tracking may NOT be set correctly.');
    console.assert(prevC    == _prevClick,  'The amount of PREVIEW CLICKS is INCORRECT. Tracking may NOT be set correctly.');

    console.log('Values calculated by tracking:')
    console.log('EXT CLICK (INV) = ' + extClickInv + ' || EXT CLICK (NON) = ' + extClickNon + ' || ENGAGE CLICK = ' + _engClick + ' || EXPAND CLICK = ' + _expClick + ' || INTRO CLICK = ' + _introClick + ' || PREV CLICK = ' + _prevClick + ' || NUM INV ITEMS BEING TRACKED = ' + _numInvItems);
    console.log(''); // Line break.
    console.log('Values input by user:');
    console.log('EXT CLICK (INV) = ' + extInvC + ' || EXT CLICK (NON) = ' + extNonC + ' || ENGAGE CLICK = ' + engC + ' || EXPAND CLICK = ' + expC + ' || INTRO CLICK = ' + introC + ' || PREV CLICK = ' + prevC);

    return '~**~ TRACKING TEST FINISHED ~**~';
}

//Track Data object that will save the tracking Data with the tracking ID as refrence
var trackDataArchive = {
    addData: function(id, trackData) {
        this[id] = trackData;
    }
}

//function that will share the track data between two elements easily and set a clicking event to the element that is borrowing the tracking
var shareTrack = function(borrower, giver) {
    borrower.setAttribute('trackID', giver.getAttribute('trackID'));
    addEvent(borrower, 'click', clickTracking, false);
}

//Track graphics 
    var make_jsonp_call = function(url,params){
    
                var my_url = '';
                var jsonp = 'jsonp' + (String)(new Date().getTime()+''+Math.random()*9999999999999999).replace('.','').slice(0,28);
                var query_array = [];
                if (typeof params == 'object')
                {
                    params.jsonp = jsonp;
                }

                for (var key in params)
                {
                   if (params.hasOwnProperty(key))
                   {
                        query_array.push(escape(key) + '=' + escape(params[key]));
                   }
                }

                var query_string = query_array.join('&');
                my_url = url.replace("callback=?",'') + query_string;
                var script = document.createElement('script');

                script.setAttribute('src', my_url);
                script.setAttribute('name', jsonp);
                script.setAttribute('id', jsonp);
                // IE uses onreadystatechange to determine if a script include has been fired
                // so we need to set it to null after it fires - hooray for IE quirks
                script.onload = script.onreadystatechange = null;

                document.getElementsByTagName('head')[0].appendChild(script);

                return jsonp;
    }

var track_graphic_impression = function(vars,json){

        //graphic tracking
        var clientTrackingID = (vars.ClientTrackingID) ? (encodeURIComponent(vars.ClientTrackingID)) : ('');
        var adTagId = vars.AdTagID;
        var advertiserID = json.ownerID;
        var introCreativeID = vars.IntroCreativeID;
        var trackingID = vars.TrackingID;
        var adTypeID = vars.trackerVars.substring(11);
        var url = vars.ApDomain +'/products/'+'dynamicwebads'+'/adserving/tracker.php?callback=?'

            var params = {'do':'graphicsinfo',
                    'AdID ':vars.AdID,
                    'AdTagID ':adTagId,
                    'AdvertiserID ':advertiserID,
                    'IntroCreativeID ':introCreativeID,
                    'TrackingID ':trackingID,
                    'AdTypeID ':adTypeID,
                    'PageURL ':escape(document.location.href),
                    'AdType ':'html_backup',
                    'ClientTrackingID ': clientTrackingID 
             }

        make_jsonp_call(url,params)
}

//Clicking function that will properly handle all click types as well as clickTags and tracking
var clickTracking = function(event) {
    event.stopPropagation ? event.stopPropagation() : (event.cancelBubble=true)
    target = (event.currentTarget) ? event.currentTarget : event.srcElement;
    // Firefox fix.
    if (target == null) {
        target = event.target;
    }

    var counter = 0;
    //makes sure that the clicked object has a tracking ID if it doesn't it tries to check its parents
    while(((target != document)) && (!(target.getAttribute('trackID')) && counter < 5)) {
        if(target.parentNode) {
            target = target.parentNode;
        }
        counter++;
    }
    //once the tracking check is done it checks to see if it reached the document level if so theres nothing to track
    if(target != document) {

        //gets TrackData from the archive
        var trackData = trackDataArchive[target.getAttribute('trackID')];

        //checks if theres a url that it needs to opem also will preform all the needed things for ClickTag if present
		if(trackData) {
			//adds random number and time of click and sends of the tracking
			var temp = trackData.track +    '&r='     +Math.random()+
							'&t='     +new Date().getTime();

			var url;
			if (trackData.url) 
			{
				if(SSM_ad_obj.ClickTag) 
				{
					url = (SSM_ad_obj.EscapeClickURL == '1') ? (decodeURIComponent(SSM_ad_obj.ClickTag) + encodeURIComponent(trackData.url)) : (decodeURIComponent(SSM_ad_obj.ClickTag) + trackData.url);
				} 
				else 
				{
					url = trackData.url;
				}
			}


			if(trackData.openMethod == '_top') {
				SSM_BASE.createNew().ajax(function(){
					if(url) {
						window.open(url, '_top');
					}
				}, temp);
/*
			    temp += '&OPEN='+encodeURIComponent(url)+'&METHOD='+trackData.openMethod+'&callback=testOpen';
			    var jsonP = document.createElement('script');
			    jsonP.setAttribute('type', 'text/javascript');
			    jsonP.setAttribute('src', temp);
			    tag('head')[0].appendChild(jsonP);*/
			} else {
				if(url) {
			    	window.open(url, trackData.openMethod);
				}
				SSM_BASE.createNew().ajax(function(){}, temp);
			}

/*
			tag('head')[0].appendChild(jsonP);
						*/
		    
		}
    }
}
var testOpen = function(e) {
	if(e.OPEN) {
    	window.open(e.OPEN, e.METHOD);
	}
}
